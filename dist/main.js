/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/button.js */ \"./src/scripts/button.js\");\n/* harmony import */ var _scripts_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/map.js */ \"./src/scripts/map.js\");\n\n\n// import Animate from \"./scripts/animate.js\"\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const data = document.getElementById(\"my_dataviz\");\n  const map = new _scripts_map_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](data);\n  const dataCopy = document.getElementById(\"copy\");\n  new _scripts_map_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](dataCopy);\n  const data1 = document.getElementById(\"tuberculosis\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data1, map, \"tuberculosis\");\n  const data2 = document.getElementById(\"malaria\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data2, map, \"malaria\");\n  const data3 = document.getElementById(\"HIV\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data3, map, \"HIV\");\n  const data2019 = document.getElementById(\"covid19\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data2019, map, \"covid19\");\n  const data4 = document.getElementById(\"guineaWorm\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data4, map, \"guineaworm\");\n  const data5 = document.getElementById(\"polio\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data5, map, \"polio\");\n  const data6 = document.getElementById(\"leprosy\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data6, map, \"leprosy\");\n\n  // const animate = document.getElementById(\"animate\");\n  // new Animate(animate,map);\n});\n\n// document.addEventListener(\"DOMContentLoaded\", () => {\n\n// });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQXlDO0FBQ047QUFDbkM7O0FBR0FFLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNoRCxNQUFNQyxJQUFJLEdBQUdGLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLFlBQVksQ0FBQztFQUNsRCxNQUFNQyxHQUFHLEdBQUcsSUFBSUwsdURBQUcsQ0FBQ0csSUFBSSxDQUFDO0VBQ3pCLE1BQU1HLFFBQVEsR0FBR0wsUUFBUSxDQUFDRyxjQUFjLENBQUMsTUFBTSxDQUFDO0VBQ2hELElBQUlKLHVEQUFHLENBQUNNLFFBQVEsQ0FBQztFQUVqQixNQUFNQyxLQUFLLEdBQUdOLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLGNBQWMsQ0FBQztFQUNyRCxJQUFJTCwwREFBTSxDQUFDUSxLQUFLLEVBQUNGLEdBQUcsRUFBQyxjQUFjLENBQUM7RUFDcEMsTUFBTUcsS0FBSyxHQUFHUCxRQUFRLENBQUNHLGNBQWMsQ0FBQyxTQUFTLENBQUM7RUFDaEQsSUFBSUwsMERBQU0sQ0FBQ1MsS0FBSyxFQUFDSCxHQUFHLEVBQUMsU0FBUyxDQUFDO0VBQy9CLE1BQU1JLEtBQUssR0FBR1IsUUFBUSxDQUFDRyxjQUFjLENBQUMsS0FBSyxDQUFDO0VBQzVDLElBQUlMLDBEQUFNLENBQUNVLEtBQUssRUFBQ0osR0FBRyxFQUFDLEtBQUssQ0FBQztFQUMzQixNQUFNSyxRQUFRLEdBQUdULFFBQVEsQ0FBQ0csY0FBYyxDQUFDLFNBQVMsQ0FBQztFQUNuRCxJQUFJTCwwREFBTSxDQUFDVyxRQUFRLEVBQUNMLEdBQUcsRUFBQyxTQUFTLENBQUM7RUFDbEMsTUFBTU0sS0FBSyxHQUFHVixRQUFRLENBQUNHLGNBQWMsQ0FBQyxZQUFZLENBQUM7RUFDbkQsSUFBSUwsMERBQU0sQ0FBQ1ksS0FBSyxFQUFDTixHQUFHLEVBQUMsWUFBWSxDQUFDO0VBQ2xDLE1BQU1PLEtBQUssR0FBR1gsUUFBUSxDQUFDRyxjQUFjLENBQUMsT0FBTyxDQUFDO0VBQzlDLElBQUlMLDBEQUFNLENBQUNhLEtBQUssRUFBQ1AsR0FBRyxFQUFDLE9BQU8sQ0FBQztFQUM3QixNQUFNUSxLQUFLLEdBQUdaLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLFNBQVMsQ0FBQztFQUNoRCxJQUFJTCwwREFBTSxDQUFDYyxLQUFLLEVBQUNSLEdBQUcsRUFBQyxTQUFTLENBQUM7O0VBRS9CO0VBQ0E7QUFHSixDQUFDLENBQUM7O0FBR0Y7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0X2dsb2JhbF9oZWFsdGgvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnV0dG9uIGZyb20gXCIuL3NjcmlwdHMvYnV0dG9uLmpzXCI7XG5pbXBvcnQgTWFwIGZyb20gXCIuL3NjcmlwdHMvbWFwLmpzXCI7XG4vLyBpbXBvcnQgQW5pbWF0ZSBmcm9tIFwiLi9zY3JpcHRzL2FuaW1hdGUuanNcIlxuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgICBjb25zdCBkYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteV9kYXRhdml6XCIpO1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoZGF0YSk7XG4gICAgY29uc3QgZGF0YUNvcHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvcHlcIik7XG4gICAgbmV3IE1hcChkYXRhQ29weSk7XG5cbiAgICBjb25zdCBkYXRhMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHViZXJjdWxvc2lzXCIpO1xuICAgIG5ldyBCdXR0b24oZGF0YTEsbWFwLFwidHViZXJjdWxvc2lzXCIpO1xuICAgIGNvbnN0IGRhdGEyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWxhcmlhXCIpO1xuICAgIG5ldyBCdXR0b24oZGF0YTIsbWFwLFwibWFsYXJpYVwiKTtcbiAgICBjb25zdCBkYXRhMyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiSElWXCIpO1xuICAgIG5ldyBCdXR0b24oZGF0YTMsbWFwLFwiSElWXCIpO1xuICAgIGNvbnN0IGRhdGEyMDE5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb3ZpZDE5XCIpO1xuICAgIG5ldyBCdXR0b24oZGF0YTIwMTksbWFwLFwiY292aWQxOVwiKTtcbiAgICBjb25zdCBkYXRhNCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ3VpbmVhV29ybVwiKTtcbiAgICBuZXcgQnV0dG9uKGRhdGE0LG1hcCxcImd1aW5lYXdvcm1cIik7XG4gICAgY29uc3QgZGF0YTUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBvbGlvXCIpO1xuICAgIG5ldyBCdXR0b24oZGF0YTUsbWFwLFwicG9saW9cIik7XG4gICAgY29uc3QgZGF0YTYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlcHJvc3lcIik7XG4gICAgbmV3IEJ1dHRvbihkYXRhNixtYXAsXCJsZXByb3N5XCIpO1xuXG4gICAgLy8gY29uc3QgYW5pbWF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW5pbWF0ZVwiKTtcbiAgICAvLyBuZXcgQW5pbWF0ZShhbmltYXRlLG1hcCk7XG4gICAgXG5cbn0pO1xuXG5cbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcblxuLy8gfSk7XG5cbiJdLCJuYW1lcyI6WyJCdXR0b24iLCJNYXAiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkYXRhIiwiZ2V0RWxlbWVudEJ5SWQiLCJtYXAiLCJkYXRhQ29weSIsImRhdGExIiwiZGF0YTIiLCJkYXRhMyIsImRhdGEyMDE5IiwiZGF0YTQiLCJkYXRhNSIsImRhdGE2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/button.js":
/*!*******************************!*\
  !*** ./src/scripts/button.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Button {\n  constructor(ele, map, disease) {\n    this.ele = ele;\n    this.map = map;\n    this.disease = disease;\n    this.ele.addEventListener(\"click\", this.handleClick.bind(this));\n  }\n  handleClick() {\n    this.map.resetMap(this.disease, this.map.year);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Button);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9idXR0b24uanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE1BQU0sQ0FBQztFQUNUQyxXQUFXLENBQUNDLEdBQUcsRUFBQ0MsR0FBRyxFQUFDQyxPQUFPLEVBQUM7SUFDeEIsSUFBSSxDQUFDRixHQUFHLEdBQUdBLEdBQUc7SUFDZCxJQUFJLENBQUNDLEdBQUcsR0FBR0EsR0FBRztJQUNkLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0YsR0FBRyxDQUFDRyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNuRTtFQUVBRCxXQUFXLEdBQUU7SUFDVCxJQUFJLENBQUNILEdBQUcsQ0FBQ0ssUUFBUSxDQUFDLElBQUksQ0FBQ0osT0FBTyxFQUFDLElBQUksQ0FBQ0QsR0FBRyxDQUFDTSxJQUFJLENBQUM7RUFDakQ7QUFDSjtBQUVBLCtEQUFlVCxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamF2YXNjcmlwdF9nbG9iYWxfaGVhbHRoLy4vc3JjL3NjcmlwdHMvYnV0dG9uLmpzP2JjOGUiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQnV0dG9uIHtcbiAgICBjb25zdHJ1Y3RvcihlbGUsbWFwLGRpc2Vhc2Upe1xuICAgICAgICB0aGlzLmVsZSA9IGVsZTtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuZGlzZWFzZSA9IGRpc2Vhc2U7XG4gICAgICAgIHRoaXMuZWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrKCl7XG4gICAgICAgIHRoaXMubWFwLnJlc2V0TWFwKHRoaXMuZGlzZWFzZSx0aGlzLm1hcC55ZWFyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiJdLCJuYW1lcyI6WyJCdXR0b24iLCJjb25zdHJ1Y3RvciIsImVsZSIsIm1hcCIsImRpc2Vhc2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlQ2xpY2siLCJiaW5kIiwicmVzZXRNYXAiLCJ5ZWFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/button.js\n");

/***/ }),

/***/ "./src/scripts/map.js":
/*!****************************!*\
  !*** ./src/scripts/map.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sidebar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sidebar.js */ \"./src/scripts/sidebar.js\");\n\nfunction htmlString() {\n  return `<svg id=\"my_dataviz\">\n<script>\n  let svg = d3.select(\"svg\");\n\n  let tooltip = d3.select(\"#tooltip\")\n    .style(\"opacity\", 0)\n    .attr(\"class\", \"tooltip\")\n    .style(\"background-color\", \"white\")\n    .style(\"border\", \"solid\")\n    .style(\"border-width\", \"1px\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"5px\")\n    .style(\"position\", \"absolute\")\n  \n  const path = d3.geoPath();\n  const projection = d3.geoNaturalEarth1()\n    .scale(150)\n    .center([0,0])\n  \n  const data = d3.map();\n  const colorScale = d3.scaleThreshold()\n    .domain([-1,0,1,3,10,30,100,300,1000,3000,10000,30000,100000,300000,1000000])\n    .range(['#FFFFFF','#888888','#fff7ec', '#feedd5','#fee3bd', '#fdd6a5',\n    '#fdc791', '#fdb27c','#fb9865', '#f67d53','#ed6243', '#df432e',\n    '#cc2317', '#b50b07','#970101', '#7f0000']);\n\n  d3.queue()\n    .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\n    .defer(d3.csv, \\`./src/scripts/data/malaria.csv\\`, function(d) { if (d.year==2020) {data.set(d.name, +d.cases)}; })\n    .await(ready);\n  \n  function ready(error, topo) {\n  \n    let mouseOver = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", .5)\n        .style(\"stroke\", \"black\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"opacity\", 1)\n        .style(\"stroke\", \"black\");\n        \n\n      const conversionHash = {\n        ABW: 'Aruba', AFG: 'Afghanistan', AGO: 'Angola', AIA: 'Anguilla',\n        ALB: 'Albania', AND: 'Andorra', ARE: 'United Arab Emirates',\n        ARG: 'Argentina', ARM: 'Armenia', ASM: 'American Samoa',\n        ATG: 'Antigua and Barbuda', AUS: 'Australia',AUT: 'Austria',\n        AZE: 'Azerbaijan', BDI: 'Burundi', BEL: 'Belgium', BEN: 'Benin',\n        BFA: 'Burkina Faso', BGD: 'Bangladesh', BGR: 'Bulgaria', BHR: 'Bahrain',\n        BHS: 'Bahamas', BIH: 'Bosnia and Herzegovina', BLR: 'Belarus',\n        BLZ: 'Belize', BMU: 'Bermuda', BOL: 'Bolivia', BRA: 'Brazil',\n        BRB: 'Barbados', BRN: 'Brunei', BTN: 'Bhutan', BWA: 'Botswana',\n        CAF: 'Central African Republic', CAN: 'Canada', CHE: 'Switzerland',\n        CHI: 'Channel islands', CHL: 'Chile', CHN: 'China', CIV: \"Côte d'Ivoire\",\n        CMR: 'Cameroon', COD: 'Democratic Republic of the Congo', COG: 'Congo',\n        COK: 'Cook Islands', COL: 'Colombia', COM: 'Comoros', CPV: 'Cabo Verde',\n        CRI: 'Costa Rica', CUB: 'Cuba', CUW: 'Curaçao', CYM: 'Cayman Islands',\n        CYP: 'Cyprus', CZE: 'Czechia', DEU: 'Germany', DJI: 'Djibouti', DMA: 'Dominica',\n        DNK: 'Denmark', DOM: 'Dominican Republic', DZA: 'Algeria', ECU: 'Ecuador',\n        EGY: 'Egypt', ERI: 'Eritrea', ESH: 'Western Sahara', ESP: 'Spain',\n        EST: 'Estonia', ETH: 'Ethiopia', FIN: 'Finland', FJI: 'Fiji',\n        FLK: 'Falkland Islands (Malvinas)', FRA: 'France', FRO: 'Faroe Islands',\n        FSM: 'Micronesia', GAB: 'Gabon', GBR: 'United Kingdom', GEO: 'Georgia',\n        GHA: 'Ghana', GIB: 'Gibraltar', GIN: 'Guinea', GLP: 'Guadeloupe',\n        GMB: 'Gambia', GNB: 'Guinea-Bissau', GNQ: 'Equatorial Guinea', GRC: 'Greece',\n        GRD: 'Grenada', GRL: 'Greenland', GTM: 'Guatemala', GUF: 'French Guiana',\n        GUM: 'Guam', GUY: 'Guyana', HKG: 'Hong Kong', HND: 'Honduras',\n        HRV: 'Croatia', HTI: 'Haiti', HUN: 'Hungary', IDN: 'Indonesia',\n        IMN: 'Isle of Man', IND: 'India', IRL: 'Ireland', IRN: 'Iran', IRQ: 'Iraq',\n        ISL: 'Iceland', ISR: 'Israel', ITA: 'Italy', JAM: 'Jamaica', JOR: 'Jordan',\n        JPN: 'Japan', KAZ: 'Kazakhstan', KEN: 'Kenya', KGZ: 'Kyrgyzstan',\n        KHM: 'Cambodia', KIR: 'Kiribati', KNA: 'Saint Kitts and Nevis',\n        KOR: 'South Korea', KWT: 'Kuwait', LAO: 'Laos', LBN: 'Lebanon',\n        LBR: 'Liberia', LBY: 'Libya', LCA: 'Saint Lucia', LIE: 'Liechtenstein',\n        LKA: 'Sri Lanka', LSO: 'Lesotho', LTU: 'Lithuania', LUX: 'Luxembourg',\n        LVA: 'Latvia', MAC: 'Macao', MAR: 'Morocco', MCO: 'Monaco', MDA: 'Moldova',\n        MDG: 'Madagascar', MDV: 'Maldives', ME1: 'Serbia and Montenegro',\n        MEX: 'Mexico', MHL: 'Marshall Islands', MKD: 'North Macedonia', MLI: 'Mali',\n        MLT: 'Malta', MMR: 'Myanmar', MNE: 'Montenegro', MNG: 'Mongolia',\n        MNP: 'Northern Mariana Islands', MOZ: 'Mozambique', MRT: 'Mauritania',\n        MTQ: 'Martinique', MUS: 'Mauritius', MWI: 'Malawi', MYS: 'Malaysia',\n        MYT: 'Mayotte', NAM: 'Namibia', NCL: 'New Caledonia', NER: 'Niger',\n        NGA: 'Nigeria', NIC: 'Nicaragua', NIU: 'Niue', NLD: 'Netherlands',\n        NOR: 'Norway', NPL: 'Nepal', NRU: 'Nauru', NZL: 'New Zealand',\n        OMN: 'Oman', PAK: 'Pakistan', PAN: 'Panama', PER: 'Peru',\n        PHL: 'Philippines', PLW: 'Palau', PNG: 'Papua New Guinea', POL: 'Poland',\n        PRI: 'Puerto Rico', PRK: 'North Korea', PRT: 'Portugal', PRY: 'Paraguay',\n        PSE: 'Palestine', PYF: 'French Polynesia', QAT: 'Qatar', REU: 'Reunion',\n        ROU: 'Romania', RUS: 'Russia', RWA: 'Rwanda', SAU: 'Saudi Arabia',\n        SDF: 'Sudan', SDN: 'Sudan', SEN: 'Senegal', SGP: 'Singapore',\n        SHN: 'Saint Helena', SLB: 'Solomon Islands', SLE: 'Sierra Leone',\n        SLV: 'El Salvador', SMR: 'San Marino', SOM: 'Somalia',\n        SPM: 'Saint Pierre and Miquelon', SRB: 'Serbia', SSD: 'South Sudan',\n        STP: 'Sao Tome and Principe', SUR: 'Suriname', SVK: 'Slovakia',\n        SVN: 'Slovenia', SWE: 'Sweden', SWZ: 'Eswatini', SXM: 'Sint Maarten',\n        SYC: 'Seychelles', SYR: 'Syria', TCA: 'Turks and Caicos Islands',\n        TCD: 'Chad', TGO: 'Togo', THA: 'Thailand', TJK: 'Tajikistan',\n        TKL: 'Tokelau', TKM: 'Turkmenistan', TLS: 'Timor-Leste', TON: 'Tonga',\n        TTO: 'Trinidad and Tobago', TUN: 'Tunisia', TUR: 'Türkiye (Turkey)',\n        TUV: 'Tuvalu', TZA: 'Tanzania', UGA: 'Uganda', UKR: 'Ukraine',\n        URY: 'Uruguay', USA: 'United States of America', UZB: 'Uzbekistan',\n        VCT: 'Saint Vincent and the Grenadines', VEN: 'Venezuela',\n        VGB: 'British Virgin Islands', VIR: 'Virgin Islands', VNM: 'Vietnam',\n        VUT: 'Vanuatu', WSM: 'Samoa', YEM: 'Yemen', ZAF: 'South Africa',\n        ZMB: 'Zambia', ZWE: 'Zimbabwe'\n      }\n      \n      tooltip\n      .style(\"opacity\", 0.8)\n      .html(d.total == -1 ? \"No data\" : conversionHash[d.id] + \": \" + d.total)\n      .style(\"left\", (d3.event.pageX + 30) + \"px\")  \n      .style(\"top\", (d3.event.pageY - 30) + \"px\");\n    }\n  \n    let mouseLeave = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", .8)\n        .style(\"stroke\", \"transparent\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"stroke\", \"transparent\")\n\n      tooltip\n        .style(\"opacity\", 0)\n    }\n    function eventHandler(e) {\n      const country = e.target;\n    \n      country.style.stroke = \"red\";\n    }\n\n\n    svg.append(\"g\")\n      .selectAll(\"path\")\n      .data(topo.features)\n      .enter()\n      .append(\"path\")\n        // draw each country\n        .attr(\"d\", d3.geoPath()\n          .projection(projection)\n        )\n        // set the color of each country\n        .attr(\"fill\", function (d) {\n          d.total = data.get(d.id);\n          if (d.total === undefined || d.total == null) d.total = -1;\n          return colorScale(d.total);\n        })\n        .style(\"stroke\", \"transparent\")\n        .attr(\"class\", function(d){ return \"Country\" } )\n        .style(\"opacity\", .8)\n        .on(\"mouseover\", mouseOver )\n        .on(\"mouseleave\", mouseLeave )\n      }\n\n\n  </script>\n\n</svg>`;\n}\nfunction htmlString0() {\n  return `<svg2 id=\"copy\">\n<script>\n  let svg2 = d3.select(\"svg\");\n\n  let tooltip = d3.select(\"#tooltip\")\n    .style(\"opacity\", 0)\n    .attr(\"class\", \"tooltip\")\n    .style(\"background-color\", \"white\")\n    .style(\"border\", \"solid\")\n    .style(\"border-width\", \"1px\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"5px\")\n    .style(\"position\", \"absolute\")\n  \n  const path = d3.geoPath();\n  const projection = d3.geoNaturalEarth1()\n    .scale(150)\n    .center([0,0])\n  \n  const data = d3.map();\n  const colorScale = d3.scaleThreshold()\n    .domain([-1,0,1,3,10,30,100,300,1000,3000,10000,30000,100000,300000,1000000])\n    .range(['#FFFFFF','#888888','#fff7ec', '#feedd5','#fee3bd', '#fdd6a5',\n    '#fdc791', '#fdb27c','#fb9865', '#f67d53','#ed6243', '#df432e',\n    '#cc2317', '#b50b07','#970101', '#7f0000']);\n\n  d3.queue()\n    .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\n    .defer(d3.csv, \\`./src/scripts/data/malaria.csv\\`, function(d) { if (d.year==2020) {data.set(d.name, +d.cases)}; })\n    .await(ready);\n  \n  function ready(error, topo) {\n  \n    let mouseOver = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", .5)\n        .style(\"stroke\", \"black\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"opacity\", 1)\n        .style(\"stroke\", \"black\");\n        \n\n      const conversionHash = {\n        ABW: 'Aruba', AFG: 'Afghanistan', AGO: 'Angola', AIA: 'Anguilla',\n        ALB: 'Albania', AND: 'Andorra', ARE: 'United Arab Emirates',\n        ARG: 'Argentina', ARM: 'Armenia', ASM: 'American Samoa',\n        ATG: 'Antigua and Barbuda', AUS: 'Australia',AUT: 'Austria',\n        AZE: 'Azerbaijan', BDI: 'Burundi', BEL: 'Belgium', BEN: 'Benin',\n        BFA: 'Burkina Faso', BGD: 'Bangladesh', BGR: 'Bulgaria', BHR: 'Bahrain',\n        BHS: 'Bahamas', BIH: 'Bosnia and Herzegovina', BLR: 'Belarus',\n        BLZ: 'Belize', BMU: 'Bermuda', BOL: 'Bolivia', BRA: 'Brazil',\n        BRB: 'Barbados', BRN: 'Brunei', BTN: 'Bhutan', BWA: 'Botswana',\n        CAF: 'Central African Republic', CAN: 'Canada', CHE: 'Switzerland',\n        CHI: 'Channel islands', CHL: 'Chile', CHN: 'China', CIV: \"Côte d'Ivoire\",\n        CMR: 'Cameroon', COD: 'Democratic Republic of the Congo', COG: 'Congo',\n        COK: 'Cook Islands', COL: 'Colombia', COM: 'Comoros', CPV: 'Cabo Verde',\n        CRI: 'Costa Rica', CUB: 'Cuba', CUW: 'Curaçao', CYM: 'Cayman Islands',\n        CYP: 'Cyprus', CZE: 'Czechia', DEU: 'Germany', DJI: 'Djibouti', DMA: 'Dominica',\n        DNK: 'Denmark', DOM: 'Dominican Republic', DZA: 'Algeria', ECU: 'Ecuador',\n        EGY: 'Egypt', ERI: 'Eritrea', ESH: 'Western Sahara', ESP: 'Spain',\n        EST: 'Estonia', ETH: 'Ethiopia', FIN: 'Finland', FJI: 'Fiji',\n        FLK: 'Falkland Islands (Malvinas)', FRA: 'France', FRO: 'Faroe Islands',\n        FSM: 'Micronesia', GAB: 'Gabon', GBR: 'United Kingdom', GEO: 'Georgia',\n        GHA: 'Ghana', GIB: 'Gibraltar', GIN: 'Guinea', GLP: 'Guadeloupe',\n        GMB: 'Gambia', GNB: 'Guinea-Bissau', GNQ: 'Equatorial Guinea', GRC: 'Greece',\n        GRD: 'Grenada', GRL: 'Greenland', GTM: 'Guatemala', GUF: 'French Guiana',\n        GUM: 'Guam', GUY: 'Guyana', HKG: 'Hong Kong', HND: 'Honduras',\n        HRV: 'Croatia', HTI: 'Haiti', HUN: 'Hungary', IDN: 'Indonesia',\n        IMN: 'Isle of Man', IND: 'India', IRL: 'Ireland', IRN: 'Iran', IRQ: 'Iraq',\n        ISL: 'Iceland', ISR: 'Israel', ITA: 'Italy', JAM: 'Jamaica', JOR: 'Jordan',\n        JPN: 'Japan', KAZ: 'Kazakhstan', KEN: 'Kenya', KGZ: 'Kyrgyzstan',\n        KHM: 'Cambodia', KIR: 'Kiribati', KNA: 'Saint Kitts and Nevis',\n        KOR: 'South Korea', KWT: 'Kuwait', LAO: 'Laos', LBN: 'Lebanon',\n        LBR: 'Liberia', LBY: 'Libya', LCA: 'Saint Lucia', LIE: 'Liechtenstein',\n        LKA: 'Sri Lanka', LSO: 'Lesotho', LTU: 'Lithuania', LUX: 'Luxembourg',\n        LVA: 'Latvia', MAC: 'Macao', MAR: 'Morocco', MCO: 'Monaco', MDA: 'Moldova',\n        MDG: 'Madagascar', MDV: 'Maldives', ME1: 'Serbia and Montenegro',\n        MEX: 'Mexico', MHL: 'Marshall Islands', MKD: 'North Macedonia', MLI: 'Mali',\n        MLT: 'Malta', MMR: 'Myanmar', MNE: 'Montenegro', MNG: 'Mongolia',\n        MNP: 'Northern Mariana Islands', MOZ: 'Mozambique', MRT: 'Mauritania',\n        MTQ: 'Martinique', MUS: 'Mauritius', MWI: 'Malawi', MYS: 'Malaysia',\n        MYT: 'Mayotte', NAM: 'Namibia', NCL: 'New Caledonia', NER: 'Niger',\n        NGA: 'Nigeria', NIC: 'Nicaragua', NIU: 'Niue', NLD: 'Netherlands',\n        NOR: 'Norway', NPL: 'Nepal', NRU: 'Nauru', NZL: 'New Zealand',\n        OMN: 'Oman', PAK: 'Pakistan', PAN: 'Panama', PER: 'Peru',\n        PHL: 'Philippines', PLW: 'Palau', PNG: 'Papua New Guinea', POL: 'Poland',\n        PRI: 'Puerto Rico', PRK: 'North Korea', PRT: 'Portugal', PRY: 'Paraguay',\n        PSE: 'Palestine', PYF: 'French Polynesia', QAT: 'Qatar', REU: 'Reunion',\n        ROU: 'Romania', RUS: 'Russia', RWA: 'Rwanda', SAU: 'Saudi Arabia',\n        SDF: 'Sudan', SDN: 'Sudan', SEN: 'Senegal', SGP: 'Singapore',\n        SHN: 'Saint Helena', SLB: 'Solomon Islands', SLE: 'Sierra Leone',\n        SLV: 'El Salvador', SMR: 'San Marino', SOM: 'Somalia',\n        SPM: 'Saint Pierre and Miquelon', SRB: 'Serbia', SSD: 'South Sudan',\n        STP: 'Sao Tome and Principe', SUR: 'Suriname', SVK: 'Slovakia',\n        SVN: 'Slovenia', SWE: 'Sweden', SWZ: 'Eswatini', SXM: 'Sint Maarten',\n        SYC: 'Seychelles', SYR: 'Syria', TCA: 'Turks and Caicos Islands',\n        TCD: 'Chad', TGO: 'Togo', THA: 'Thailand', TJK: 'Tajikistan',\n        TKL: 'Tokelau', TKM: 'Turkmenistan', TLS: 'Timor-Leste', TON: 'Tonga',\n        TTO: 'Trinidad and Tobago', TUN: 'Tunisia', TUR: 'Türkiye (Turkey)',\n        TUV: 'Tuvalu', TZA: 'Tanzania', UGA: 'Uganda', UKR: 'Ukraine',\n        URY: 'Uruguay', USA: 'United States of America', UZB: 'Uzbekistan',\n        VCT: 'Saint Vincent and the Grenadines', VEN: 'Venezuela',\n        VGB: 'British Virgin Islands', VIR: 'Virgin Islands', VNM: 'Vietnam',\n        VUT: 'Vanuatu', WSM: 'Samoa', YEM: 'Yemen', ZAF: 'South Africa',\n        ZMB: 'Zambia', ZWE: 'Zimbabwe'\n      }\n      \n      tooltip\n      .style(\"opacity\", 0.8)\n      .html(d.total == -1 ? \"No data\" : conversionHash[d.id] + \": \" + d.total)\n      .style(\"left\", (d3.event.pageX + 30) + \"px\")  \n      .style(\"top\", (d3.event.pageY - 30) + \"px\");\n    }\n  \n    let mouseLeave = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", .8)\n        .style(\"stroke\", \"transparent\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"stroke\", \"transparent\")\n\n      tooltip\n        .style(\"opacity\", 0)\n    }\n    function eventHandler(e) {\n      const country = e.target;\n    \n      country.style.stroke = \"red\";\n    }\n\n    svg2.append(\"g\")\n      .selectAll(\"path\")\n      .data(topo.features)\n      .enter()\n      .append(\"path\")\n        // draw each country\n        .attr(\"d\", d3.geoPath()\n          .projection(projection)\n        )\n        // set the color of each country\n        .attr(\"fill\", function (d) {\n          d.total = data.get(d.id);\n          if (d.total === undefined || d.total == null) d.total = -1;\n          return colorScale(d.total);\n        })\n        .style(\"stroke\", \"transparent\")\n        .attr(\"class\", function(d){ return \"Country\" } )\n        .style(\"opacity\", .8)\n        .on(\"mouseover\", mouseOver )\n        .on(\"mouseleave\", mouseLeave )\n      }\n\n\n  </script>\n\n</svg2>`;\n}\nfunction htmlString2(chosenDisease, chosenYear) {\n  return `<svg id=\"my_dataviz\" width=\"850\" height=\"450\">\n<script>\n  \n  d3.queue()\n    .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\n    .defer(d3.csv, \\`./src/scripts/data/${chosenDisease}.csv\\`, function(d) { if (d.year==\\`${chosenYear}\\`) {data.set(d.name, +d.cases)}; })\n    .await(ready);\n  \n\n    \n  </script>\n\n</svg>`;\n}\nvar setInnerHTML = function (elm, html) {\n  elm.innerHTML = html;\n  Array.from(elm.querySelectorAll(\"script\")).forEach(oldScript => {\n    const newScript = document.createElement(\"script\");\n    Array.from(oldScript.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value));\n    newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n    oldScript.parentNode.replaceChild(newScript, oldScript);\n  });\n};\nclass Map {\n  constructor(ele) {\n    this.ele = ele;\n    this.year = 2020;\n    this.disease = 'malaria';\n    this.min = 2000;\n    this.max = 2020;\n    setInnerHTML(this.ele, htmlString());\n    const sidebar = document.getElementById(\"context\");\n    this.sidebar = new _sidebar_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](sidebar);\n    let slider = document.getElementById(\"myRange\");\n    slider.map = this;\n    this.slider = slider;\n    slider.oninput = function () {\n      this.map.resetMap(this.disease, this.value);\n      // svg._groups[0][0].innerHTML = ''\n      const html = svg._groups[0][0].innerHTML.split('<g>');\n      if (html.length > 3) {\n        svg._groups[0][0].innerHTML = [html[1], html[2], html[3]].join('<g>');\n      }\n    };\n    this.resetMap(\"malaria\", 2020);\n  }\n  resetMap(disease, year) {\n    this.disease = disease;\n    this.year = year;\n    if (disease == 'polio') {\n      this.min = 2016;\n      this.max = 2021;\n    } else if (disease == 'leprosy') {\n      this.min = 2012;\n      this.max = 2021;\n    } else {\n      if (disease == 'covid19') {\n        this.min = 2020;\n        this.max = 2021;\n      } else if (disease == 'guineaworm') {\n        this.min = 1989;\n        this.max = 2021;\n      } else {\n        if (disease == 'malaria') {\n          this.min = 2000;\n          this.max = 2020;\n        } else {\n          this.min = 2000;\n          this.max = 2021;\n        }\n      }\n    }\n    // setInnerHTML(this.ele, htmlString2(\"nulldata\",2020));\n    if (this.year > this.max) this.year = this.max;\n    if (this.year < this.min) this.year = this.min;\n    setInnerHTML(this.ele, htmlString2(this.disease, this.year));\n    this.sidebar.resetSidebar(this.disease, this.year);\n    this.slider.disease = disease;\n    this.slider.min = this.min;\n    this.slider.max = this.max;\n    this.slider.value = this.year;\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Map);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/map.js\n");

/***/ }),

/***/ "./src/scripts/sidebar.js":
/*!********************************!*\
  !*** ./src/scripts/sidebar.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nfunction htmlString() {\n  return `<h3>Malaria 2020</h3>\n<text>\n  Every 75 seconds, a child under 5 dies of malaria.\n  <br>\n  <br>\n  Malaria is a mosquito born illness, disproportionately killing young children in poor, tropical countries.\n  <br>  \n  <br>\n  Malaria can be prevented by sleeping under $6 insecticide-treated bednets or taking anti-malaria medication -- it can also be treated.  Malaria rates have decreased significantly since the 2000s as more people have gotten access to bednets.\n</text>`;\n}\nfunction htmlString2(disease, year) {\n  if (disease === \"malaria\") {\n    return `<h3>Malaria ${year}</h3>\n        <text>\n          Malaria is a mosquito born illness, disproportionately killing young children in poor, tropical countries.  It's a leading killer of young children and a major drag of economic growth.\n          <br>\n          <br>\n          Malaria can be prevented by sleeping under $6 insecticide-treated bednets or taking anti-malaria medication -- it can also be treated.  Malaria rates have decreased significantly since the 2000s as more people have gotten access to bednets.\n        </text>`;\n  } else if (disease === \"tuberculosis\") {\n    return `<h3>Tuberculosis ${year}</h3>\n        <text>\n        Tuberculosis was the leading cause of death by infectious disease (after COVID-19), with over 1 million deaths in 2020.\n        <br>\n        <br>\n        Tuberculosis continues to kill people in nearly every country on earth but is esepcially serious in poorer countries.  Among people who die of HIV, tuberculosis is most often what actually kills them, accounting for around 30% of deaths.  (HIV deaths are not included in this map.)\n        <br>\n        <br>\n        Tuberculosis is curable with treatment.\n        </text>`;\n  } else {\n    if (disease === \"HIV\") {\n      return `<h3>HIV ${year}</h3>\n        <text>\n        HIV deaths peaked in 2004, when HIV was the leading cause of death across Africa.  (From 1997-2006, HIV accounted for the majority of deaths in Zambia.)  Although the situation has improved sunstantially, HIV continues to be the leading cause of death in South Africa, the six countries it borders, and Malawi.\n        <br>\n        <br>\n        HIV it both preventable and treatable, but it is not currently curable.\n        </text>`;\n    } else if (disease === \"leprosy\") {\n      return `<h3>Leprosy ${year}</h3>\n        <text>\n        Hansen's disease, better known as leprosy, is a disease causing nerve damage, which can lead to blindness, paralysis, or untreated skin injuries.  Although it's often thought of as an ancient disease, it's still present in many countries, with over 100,000 cases worldwide in 2020.\n        <br>\n        <br>\n        Hansen's is not very infectious and can be cured with treatment, though the treatment takes 1-2 years.  Nerve damage and blindness caused by Hansen's disease are not reversible.\n        </text>`;\n    } else {\n      if (disease === \"guineaworm\") {\n        return `<h3>Guinea Worm ${year}</h3>\n        <text>\n        Along with polio, dracunculiasis (the diseases caused by a guinea worm infection) could plausibly be eradicated worldwide.  Although it doesn't kill people, guinea worm infections are debilitating and very painful.  (Don't watch <a href=\"https://www.youtube.com/watch?v=oCB1A2gFvuU\" target=\"_blank\">this video</a> if you're squeamish.)\n        <br>\n        <br>\n        Guinea worm infections are a result of drinking contaminated water, and it can be prevented with a cheap filter.  It's only natural resevoir is in humans, but Chad has reported infections in dogs, as well.\n        </text>`;\n      } else if (disease === \"polio\") {\n        return `<h3>Polio ${year}</h3>\n        <text>\n        To date, smallpox is the only human disease that has been eradicated, but polio may be next.  Two of the three strains of wild polio have been eliminated, and as of 2020, wild polio is present in just two countries: Afghanistan and Pakistan.\n        <br>\n        <br>\n        Polio can be prevented with vaccines, but universal coverage is difficult to achieve in some areas.  Diagnosis is also difficult because polio is often asymptomatic.\n        </text>`;\n      } else {\n        return `<h3>COVID-19 ${year}</h3>\n        <text>\n        You know about COVID-19!\n        <br>\n        <br>\n        \n        </text>`;\n      }\n    }\n  }\n}\nclass Sidebar {\n  constructor(ele) {\n    this.ele = ele;\n    this.ele.innerHTML = htmlString();\n  }\n  resetSidebar(disease, year) {\n    this.ele.innerHTML = htmlString2(disease, year);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sidebar);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/sidebar.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0X2dsb2JhbF9oZWFsdGgvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;