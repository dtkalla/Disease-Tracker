/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/button.js */ \"./src/scripts/button.js\");\n/* harmony import */ var _scripts_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/map.js */ \"./src/scripts/map.js\");\n\n\n// import Animate from \"./scripts/animate.js\"\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const data = document.getElementById(\"my_dataviz\");\n  new _scripts_map_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](data);\n  const dataCopy = document.getElementById(\"copy\");\n  const map = new _scripts_map_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](dataCopy);\n  const data1 = document.getElementById(\"tuberculosis\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data1, map, \"tuberculosis\");\n  const data2 = document.getElementById(\"malaria\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data2, map, \"malaria\");\n  const data3 = document.getElementById(\"HIV\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data3, map, \"HIV\");\n  const data2019 = document.getElementById(\"covid19\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data2019, map, \"covid19\");\n  const data4 = document.getElementById(\"guineaWorm\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data4, map, \"guineaworm\");\n  const data5 = document.getElementById(\"polio\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data5, map, \"polio\");\n  const data6 = document.getElementById(\"leprosy\");\n  new _scripts_button_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data6, map, \"leprosy\");\n\n  // const animate = document.getElementById(\"animate\");\n  // new Animate(animate,map);\n});\n\n// document.addEventListener(\"DOMContentLoaded\", () => {\n\n// });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQXlDO0FBQ047QUFDbkM7O0FBR0FFLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNoRCxNQUFNQyxJQUFJLEdBQUdGLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLFlBQVksQ0FBQztFQUNsRCxJQUFJSix1REFBRyxDQUFDRyxJQUFJLENBQUM7RUFDYixNQUFNRSxRQUFRLEdBQUdKLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLE1BQU0sQ0FBQztFQUNoRCxNQUFNRSxHQUFHLEdBQUcsSUFBSU4sdURBQUcsQ0FBQ0ssUUFBUSxDQUFDO0VBRTdCLE1BQU1FLEtBQUssR0FBR04sUUFBUSxDQUFDRyxjQUFjLENBQUMsY0FBYyxDQUFDO0VBQ3JELElBQUlMLDBEQUFNLENBQUNRLEtBQUssRUFBQ0QsR0FBRyxFQUFDLGNBQWMsQ0FBQztFQUNwQyxNQUFNRSxLQUFLLEdBQUdQLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLFNBQVMsQ0FBQztFQUNoRCxJQUFJTCwwREFBTSxDQUFDUyxLQUFLLEVBQUNGLEdBQUcsRUFBQyxTQUFTLENBQUM7RUFDL0IsTUFBTUcsS0FBSyxHQUFHUixRQUFRLENBQUNHLGNBQWMsQ0FBQyxLQUFLLENBQUM7RUFDNUMsSUFBSUwsMERBQU0sQ0FBQ1UsS0FBSyxFQUFDSCxHQUFHLEVBQUMsS0FBSyxDQUFDO0VBQzNCLE1BQU1JLFFBQVEsR0FBR1QsUUFBUSxDQUFDRyxjQUFjLENBQUMsU0FBUyxDQUFDO0VBQ25ELElBQUlMLDBEQUFNLENBQUNXLFFBQVEsRUFBQ0osR0FBRyxFQUFDLFNBQVMsQ0FBQztFQUNsQyxNQUFNSyxLQUFLLEdBQUdWLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLFlBQVksQ0FBQztFQUNuRCxJQUFJTCwwREFBTSxDQUFDWSxLQUFLLEVBQUNMLEdBQUcsRUFBQyxZQUFZLENBQUM7RUFDbEMsTUFBTU0sS0FBSyxHQUFHWCxRQUFRLENBQUNHLGNBQWMsQ0FBQyxPQUFPLENBQUM7RUFDOUMsSUFBSUwsMERBQU0sQ0FBQ2EsS0FBSyxFQUFDTixHQUFHLEVBQUMsT0FBTyxDQUFDO0VBQzdCLE1BQU1PLEtBQUssR0FBR1osUUFBUSxDQUFDRyxjQUFjLENBQUMsU0FBUyxDQUFDO0VBQ2hELElBQUlMLDBEQUFNLENBQUNjLEtBQUssRUFBQ1AsR0FBRyxFQUFDLFNBQVMsQ0FBQzs7RUFFL0I7RUFDQTtBQUdKLENBQUMsQ0FBQzs7QUFHRjs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHRfZ2xvYmFsX2hlYWx0aC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCdXR0b24gZnJvbSBcIi4vc2NyaXB0cy9idXR0b24uanNcIjtcbmltcG9ydCBNYXAgZnJvbSBcIi4vc2NyaXB0cy9tYXAuanNcIjtcbi8vIGltcG9ydCBBbmltYXRlIGZyb20gXCIuL3NjcmlwdHMvYW5pbWF0ZS5qc1wiXG5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15X2RhdGF2aXpcIik7XG4gICAgbmV3IE1hcChkYXRhKTtcbiAgICBjb25zdCBkYXRhQ29weSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29weVwiKTtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKGRhdGFDb3B5KTtcblxuICAgIGNvbnN0IGRhdGExID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0dWJlcmN1bG9zaXNcIik7XG4gICAgbmV3IEJ1dHRvbihkYXRhMSxtYXAsXCJ0dWJlcmN1bG9zaXNcIik7XG4gICAgY29uc3QgZGF0YTIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hbGFyaWFcIik7XG4gICAgbmV3IEJ1dHRvbihkYXRhMixtYXAsXCJtYWxhcmlhXCIpO1xuICAgIGNvbnN0IGRhdGEzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJISVZcIik7XG4gICAgbmV3IEJ1dHRvbihkYXRhMyxtYXAsXCJISVZcIik7XG4gICAgY29uc3QgZGF0YTIwMTkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvdmlkMTlcIik7XG4gICAgbmV3IEJ1dHRvbihkYXRhMjAxOSxtYXAsXCJjb3ZpZDE5XCIpO1xuICAgIGNvbnN0IGRhdGE0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJndWluZWFXb3JtXCIpO1xuICAgIG5ldyBCdXR0b24oZGF0YTQsbWFwLFwiZ3VpbmVhd29ybVwiKTtcbiAgICBjb25zdCBkYXRhNSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9saW9cIik7XG4gICAgbmV3IEJ1dHRvbihkYXRhNSxtYXAsXCJwb2xpb1wiKTtcbiAgICBjb25zdCBkYXRhNiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVwcm9zeVwiKTtcbiAgICBuZXcgQnV0dG9uKGRhdGE2LG1hcCxcImxlcHJvc3lcIik7XG5cbiAgICAvLyBjb25zdCBhbmltYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbmltYXRlXCIpO1xuICAgIC8vIG5ldyBBbmltYXRlKGFuaW1hdGUsbWFwKTtcbiAgICBcblxufSk7XG5cblxuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuXG4vLyB9KTtcblxuIl0sIm5hbWVzIjpbIkJ1dHRvbiIsIk1hcCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRhdGEiLCJnZXRFbGVtZW50QnlJZCIsImRhdGFDb3B5IiwibWFwIiwiZGF0YTEiLCJkYXRhMiIsImRhdGEzIiwiZGF0YTIwMTkiLCJkYXRhNCIsImRhdGE1IiwiZGF0YTYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/button.js":
/*!*******************************!*\
  !*** ./src/scripts/button.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Button {\n  constructor(ele, map, disease) {\n    this.ele = ele;\n    this.map = map;\n    this.disease = disease;\n    this.ele.addEventListener(\"click\", this.handleClick.bind(this));\n  }\n  handleClick() {\n    this.map.resetMap(this.disease, this.map.year);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Button);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9idXR0b24uanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE1BQU0sQ0FBQztFQUNUQyxXQUFXLENBQUNDLEdBQUcsRUFBQ0MsR0FBRyxFQUFDQyxPQUFPLEVBQUM7SUFDeEIsSUFBSSxDQUFDRixHQUFHLEdBQUdBLEdBQUc7SUFDZCxJQUFJLENBQUNDLEdBQUcsR0FBR0EsR0FBRztJQUNkLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0YsR0FBRyxDQUFDRyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNuRTtFQUVBRCxXQUFXLEdBQUU7SUFDVCxJQUFJLENBQUNILEdBQUcsQ0FBQ0ssUUFBUSxDQUFDLElBQUksQ0FBQ0osT0FBTyxFQUFDLElBQUksQ0FBQ0QsR0FBRyxDQUFDTSxJQUFJLENBQUM7RUFDakQ7QUFDSjtBQUVBLCtEQUFlVCxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamF2YXNjcmlwdF9nbG9iYWxfaGVhbHRoLy4vc3JjL3NjcmlwdHMvYnV0dG9uLmpzP2JjOGUiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQnV0dG9uIHtcbiAgICBjb25zdHJ1Y3RvcihlbGUsbWFwLGRpc2Vhc2Upe1xuICAgICAgICB0aGlzLmVsZSA9IGVsZTtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuZGlzZWFzZSA9IGRpc2Vhc2U7XG4gICAgICAgIHRoaXMuZWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrKCl7XG4gICAgICAgIHRoaXMubWFwLnJlc2V0TWFwKHRoaXMuZGlzZWFzZSx0aGlzLm1hcC55ZWFyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiJdLCJuYW1lcyI6WyJCdXR0b24iLCJjb25zdHJ1Y3RvciIsImVsZSIsIm1hcCIsImRpc2Vhc2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlQ2xpY2siLCJiaW5kIiwicmVzZXRNYXAiLCJ5ZWFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/button.js\n");

/***/ }),

/***/ "./src/scripts/map.js":
/*!****************************!*\
  !*** ./src/scripts/map.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sidebar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sidebar.js */ \"./src/scripts/sidebar.js\");\n\nfunction htmlString() {\n  return `<svg id=\"my_dataviz\">\n<script>\n  let svg = d3.select(\"svg\");\n\n  let tooltip = d3.select(\"#tooltip\")\n    .style(\"opacity\", 0)\n    .attr(\"class\", \"tooltip\")\n    .style(\"background-color\", \"white\")\n    .style(\"border\", \"solid\")\n    .style(\"border-width\", \"1px\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"5px\")\n    .style(\"position\", \"absolute\")\n  \n  const path = d3.geoPath();\n  const projection = d3.geoNaturalEarth1()\n    .scale(150)\n    .center([0,0])\n  \n  const data = d3.map();\n  const colorScale = d3.scaleThreshold()\n    .domain([-1,0,1,3,10,30,100,300,1000,3000,10000,30000,100000,300000,1000000])\n    .range(['#FFFFFF','#888888','#fff7ec', '#feedd5','#fee3bd', '#fdd6a5',\n    '#fdc791', '#fdb27c','#fb9865', '#f67d53','#ed6243', '#df432e',\n    '#cc2317', '#b50b07','#970101', '#7f0000']);\n\n  d3.queue()\n    .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\n    .defer(d3.csv, \\`./src/scripts/data/malaria.csv\\`, function(d) { if (d.year==2020) {data.set(d.name, +d.cases)}; })\n    .await(ready);\n  \n  function ready(error, topo) {\n  \n    let mouseOver = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", .5)\n        .style(\"stroke\", \"black\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"opacity\", 1)\n        .style(\"stroke\", \"black\");\n        \n\n      const conversionHash = {\n        ABW: 'Aruba', AFG: 'Afghanistan', AGO: 'Angola', AIA: 'Anguilla',\n        ALB: 'Albania', AND: 'Andorra', ARE: 'United Arab Emirates',\n        ARG: 'Argentina', ARM: 'Armenia', ASM: 'American Samoa',\n        ATG: 'Antigua and Barbuda', AUS: 'Australia',AUT: 'Austria',\n        AZE: 'Azerbaijan', BDI: 'Burundi', BEL: 'Belgium', BEN: 'Benin',\n        BFA: 'Burkina Faso', BGD: 'Bangladesh', BGR: 'Bulgaria', BHR: 'Bahrain',\n        BHS: 'Bahamas', BIH: 'Bosnia and Herzegovina', BLR: 'Belarus',\n        BLZ: 'Belize', BMU: 'Bermuda', BOL: 'Bolivia', BRA: 'Brazil',\n        BRB: 'Barbados', BRN: 'Brunei', BTN: 'Bhutan', BWA: 'Botswana',\n        CAF: 'Central African Republic', CAN: 'Canada', CHE: 'Switzerland',\n        CHI: 'Channel islands', CHL: 'Chile', CHN: 'China', CIV: \"Côte d'Ivoire\",\n        CMR: 'Cameroon', COD: 'Democratic Republic of the Congo', COG: 'Congo',\n        COK: 'Cook Islands', COL: 'Colombia', COM: 'Comoros', CPV: 'Cabo Verde',\n        CRI: 'Costa Rica', CUB: 'Cuba', CUW: 'Curaçao', CYM: 'Cayman Islands',\n        CYP: 'Cyprus', CZE: 'Czechia', DEU: 'Germany', DJI: 'Djibouti', DMA: 'Dominica',\n        DNK: 'Denmark', DOM: 'Dominican Republic', DZA: 'Algeria', ECU: 'Ecuador',\n        EGY: 'Egypt', ERI: 'Eritrea', ESH: 'Western Sahara', ESP: 'Spain',\n        EST: 'Estonia', ETH: 'Ethiopia', FIN: 'Finland', FJI: 'Fiji',\n        FLK: 'Falkland Islands (Malvinas)', FRA: 'France', FRO: 'Faroe Islands',\n        FSM: 'Micronesia', GAB: 'Gabon', GBR: 'United Kingdom', GEO: 'Georgia',\n        GHA: 'Ghana', GIB: 'Gibraltar', GIN: 'Guinea', GLP: 'Guadeloupe',\n        GMB: 'Gambia', GNB: 'Guinea-Bissau', GNQ: 'Equatorial Guinea', GRC: 'Greece',\n        GRD: 'Grenada', GRL: 'Greenland', GTM: 'Guatemala', GUF: 'French Guiana',\n        GUM: 'Guam', GUY: 'Guyana', HKG: 'Hong Kong', HND: 'Honduras',\n        HRV: 'Croatia', HTI: 'Haiti', HUN: 'Hungary', IDN: 'Indonesia',\n        IMN: 'Isle of Man', IND: 'India', IRL: 'Ireland', IRN: 'Iran', IRQ: 'Iraq',\n        ISL: 'Iceland', ISR: 'Israel', ITA: 'Italy', JAM: 'Jamaica', JOR: 'Jordan',\n        JPN: 'Japan', KAZ: 'Kazakhstan', KEN: 'Kenya', KGZ: 'Kyrgyzstan',\n        KHM: 'Cambodia', KIR: 'Kiribati', KNA: 'Saint Kitts and Nevis',\n        KOR: 'South Korea', KWT: 'Kuwait', LAO: 'Laos', LBN: 'Lebanon',\n        LBR: 'Liberia', LBY: 'Libya', LCA: 'Saint Lucia', LIE: 'Liechtenstein',\n        LKA: 'Sri Lanka', LSO: 'Lesotho', LTU: 'Lithuania', LUX: 'Luxembourg',\n        LVA: 'Latvia', MAC: 'Macao', MAR: 'Morocco', MCO: 'Monaco', MDA: 'Moldova',\n        MDG: 'Madagascar', MDV: 'Maldives', ME1: 'Serbia and Montenegro',\n        MEX: 'Mexico', MHL: 'Marshall Islands', MKD: 'North Macedonia', MLI: 'Mali',\n        MLT: 'Malta', MMR: 'Myanmar', MNE: 'Montenegro', MNG: 'Mongolia',\n        MNP: 'Northern Mariana Islands', MOZ: 'Mozambique', MRT: 'Mauritania',\n        MTQ: 'Martinique', MUS: 'Mauritius', MWI: 'Malawi', MYS: 'Malaysia',\n        MYT: 'Mayotte', NAM: 'Namibia', NCL: 'New Caledonia', NER: 'Niger',\n        NGA: 'Nigeria', NIC: 'Nicaragua', NIU: 'Niue', NLD: 'Netherlands',\n        NOR: 'Norway', NPL: 'Nepal', NRU: 'Nauru', NZL: 'New Zealand',\n        OMN: 'Oman', PAK: 'Pakistan', PAN: 'Panama', PER: 'Peru',\n        PHL: 'Philippines', PLW: 'Palau', PNG: 'Papua New Guinea', POL: 'Poland',\n        PRI: 'Puerto Rico', PRK: 'North Korea', PRT: 'Portugal', PRY: 'Paraguay',\n        PSE: 'Palestine', PYF: 'French Polynesia', QAT: 'Qatar', REU: 'Reunion',\n        ROU: 'Romania', RUS: 'Russia', RWA: 'Rwanda', SAU: 'Saudi Arabia',\n        SDF: 'Sudan', SDN: 'Sudan', SEN: 'Senegal', SGP: 'Singapore',\n        SHN: 'Saint Helena', SLB: 'Solomon Islands', SLE: 'Sierra Leone',\n        SLV: 'El Salvador', SMR: 'San Marino', SOM: 'Somalia',\n        SPM: 'Saint Pierre and Miquelon', SRB: 'Serbia', SSD: 'South Sudan',\n        STP: 'Sao Tome and Principe', SUR: 'Suriname', SVK: 'Slovakia',\n        SVN: 'Slovenia', SWE: 'Sweden', SWZ: 'Eswatini', SXM: 'Sint Maarten',\n        SYC: 'Seychelles', SYR: 'Syria', TCA: 'Turks and Caicos Islands',\n        TCD: 'Chad', TGO: 'Togo', THA: 'Thailand', TJK: 'Tajikistan',\n        TKL: 'Tokelau', TKM: 'Turkmenistan', TLS: 'Timor-Leste', TON: 'Tonga',\n        TTO: 'Trinidad and Tobago', TUN: 'Tunisia', TUR: 'Türkiye (Turkey)',\n        TUV: 'Tuvalu', TZA: 'Tanzania', UGA: 'Uganda', UKR: 'Ukraine',\n        URY: 'Uruguay', USA: 'United States of America', UZB: 'Uzbekistan',\n        VCT: 'Saint Vincent and the Grenadines', VEN: 'Venezuela',\n        VGB: 'British Virgin Islands', VIR: 'Virgin Islands', VNM: 'Vietnam',\n        VUT: 'Vanuatu', WSM: 'Samoa', YEM: 'Yemen', ZAF: 'South Africa',\n        ZMB: 'Zambia', ZWE: 'Zimbabwe'\n      }\n      \n      tooltip\n      .style(\"opacity\", 0.8)\n      .html(d.total == -1 ? \"No data\" : conversionHash[d.id] + \": \" + d.total)\n      .style(\"left\", (d3.event.pageX + 30) + \"px\")  \n      .style(\"top\", (d3.event.pageY - 30) + \"px\");\n    }\n  \n    let mouseLeave = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", .8)\n        .style(\"stroke\", \"transparent\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"stroke\", \"transparent\")\n\n      tooltip\n        .style(\"opacity\", 0)\n    }\n    function eventHandler(e) {\n      const country = e.target;\n    \n      country.style.stroke = \"red\";\n    }\n\n\n    svg.append(\"g\")\n      .selectAll(\"path\")\n      .data(topo.features)\n      .enter()\n      .append(\"path\")\n        // draw each country\n        .attr(\"d\", d3.geoPath()\n          .projection(projection)\n        )\n        // set the color of each country\n        .attr(\"fill\", function (d) {\n          d.total = data.get(d.id);\n          if (d.total === undefined || d.total == null) d.total = -1;\n          return colorScale(d.total);\n        })\n        .style(\"stroke\", \"transparent\")\n        .attr(\"class\", function(d){ return \"Country\" } )\n        .style(\"opacity\", 1)\n        .on(\"mouseover\", mouseOver )\n        .on(\"mouseleave\", mouseLeave )\n      }\n\n\n  </script>\n\n</svg>`;\n}\nfunction htmlString0() {\n  return `<svg2 id=\"copy\">\n<script>\n  let svg2 = d3.select(\"svg\");\n\n  let tooltip = d3.select(\"#tooltip\")\n    .style(\"opacity\", 0)\n    .attr(\"class\", \"tooltip\")\n    .style(\"background-color\", \"white\")\n    .style(\"border\", \"solid\")\n    .style(\"border-width\", \"1px\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"5px\")\n    .style(\"position\", \"absolute\")\n  \n  const path = d3.geoPath();\n  const projection = d3.geoNaturalEarth1()\n    .scale(150)\n    .center([0,0])\n  \n  const data = d3.map();\n  const colorScale = d3.scaleThreshold()\n    .domain([-1,0,1,3,10,30,100,300,1000,3000,10000,30000,100000,300000,1000000])\n    .range(['#FFFFFF','#888888','#fff7ec', '#feedd5','#fee3bd', '#fdd6a5',\n    '#fdc791', '#fdb27c','#fb9865', '#f67d53','#ed6243', '#df432e',\n    '#cc2317', '#b50b07','#970101', '#7f0000']);\n\n  d3.queue()\n    .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\n    .defer(d3.csv, \\`./src/scripts/data/malaria.csv\\`, function(d) { if (d.year==2020) {data.set(d.name, +d.cases)}; })\n    .await(ready);\n  \n  function ready(error, topo) {\n  \n    let mouseOver = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", .5)\n        .style(\"stroke\", \"black\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"opacity\", 1)\n        .style(\"stroke\", \"black\");\n        \n\n      const conversionHash = {\n        ABW: 'Aruba', AFG: 'Afghanistan', AGO: 'Angola', AIA: 'Anguilla',\n        ALB: 'Albania', AND: 'Andorra', ARE: 'United Arab Emirates',\n        ARG: 'Argentina', ARM: 'Armenia', ASM: 'American Samoa',\n        ATG: 'Antigua and Barbuda', AUS: 'Australia',AUT: 'Austria',\n        AZE: 'Azerbaijan', BDI: 'Burundi', BEL: 'Belgium', BEN: 'Benin',\n        BFA: 'Burkina Faso', BGD: 'Bangladesh', BGR: 'Bulgaria', BHR: 'Bahrain',\n        BHS: 'Bahamas', BIH: 'Bosnia and Herzegovina', BLR: 'Belarus',\n        BLZ: 'Belize', BMU: 'Bermuda', BOL: 'Bolivia', BRA: 'Brazil',\n        BRB: 'Barbados', BRN: 'Brunei', BTN: 'Bhutan', BWA: 'Botswana',\n        CAF: 'Central African Republic', CAN: 'Canada', CHE: 'Switzerland',\n        CHI: 'Channel islands', CHL: 'Chile', CHN: 'China', CIV: \"Côte d'Ivoire\",\n        CMR: 'Cameroon', COD: 'Democratic Republic of the Congo', COG: 'Congo',\n        COK: 'Cook Islands', COL: 'Colombia', COM: 'Comoros', CPV: 'Cabo Verde',\n        CRI: 'Costa Rica', CUB: 'Cuba', CUW: 'Curaçao', CYM: 'Cayman Islands',\n        CYP: 'Cyprus', CZE: 'Czechia', DEU: 'Germany', DJI: 'Djibouti', DMA: 'Dominica',\n        DNK: 'Denmark', DOM: 'Dominican Republic', DZA: 'Algeria', ECU: 'Ecuador',\n        EGY: 'Egypt', ERI: 'Eritrea', ESH: 'Western Sahara', ESP: 'Spain',\n        EST: 'Estonia', ETH: 'Ethiopia', FIN: 'Finland', FJI: 'Fiji',\n        FLK: 'Falkland Islands (Malvinas)', FRA: 'France', FRO: 'Faroe Islands',\n        FSM: 'Micronesia', GAB: 'Gabon', GBR: 'United Kingdom', GEO: 'Georgia',\n        GHA: 'Ghana', GIB: 'Gibraltar', GIN: 'Guinea', GLP: 'Guadeloupe',\n        GMB: 'Gambia', GNB: 'Guinea-Bissau', GNQ: 'Equatorial Guinea', GRC: 'Greece',\n        GRD: 'Grenada', GRL: 'Greenland', GTM: 'Guatemala', GUF: 'French Guiana',\n        GUM: 'Guam', GUY: 'Guyana', HKG: 'Hong Kong', HND: 'Honduras',\n        HRV: 'Croatia', HTI: 'Haiti', HUN: 'Hungary', IDN: 'Indonesia',\n        IMN: 'Isle of Man', IND: 'India', IRL: 'Ireland', IRN: 'Iran', IRQ: 'Iraq',\n        ISL: 'Iceland', ISR: 'Israel', ITA: 'Italy', JAM: 'Jamaica', JOR: 'Jordan',\n        JPN: 'Japan', KAZ: 'Kazakhstan', KEN: 'Kenya', KGZ: 'Kyrgyzstan',\n        KHM: 'Cambodia', KIR: 'Kiribati', KNA: 'Saint Kitts and Nevis',\n        KOR: 'South Korea', KWT: 'Kuwait', LAO: 'Laos', LBN: 'Lebanon',\n        LBR: 'Liberia', LBY: 'Libya', LCA: 'Saint Lucia', LIE: 'Liechtenstein',\n        LKA: 'Sri Lanka', LSO: 'Lesotho', LTU: 'Lithuania', LUX: 'Luxembourg',\n        LVA: 'Latvia', MAC: 'Macao', MAR: 'Morocco', MCO: 'Monaco', MDA: 'Moldova',\n        MDG: 'Madagascar', MDV: 'Maldives', ME1: 'Serbia and Montenegro',\n        MEX: 'Mexico', MHL: 'Marshall Islands', MKD: 'North Macedonia', MLI: 'Mali',\n        MLT: 'Malta', MMR: 'Myanmar', MNE: 'Montenegro', MNG: 'Mongolia',\n        MNP: 'Northern Mariana Islands', MOZ: 'Mozambique', MRT: 'Mauritania',\n        MTQ: 'Martinique', MUS: 'Mauritius', MWI: 'Malawi', MYS: 'Malaysia',\n        MYT: 'Mayotte', NAM: 'Namibia', NCL: 'New Caledonia', NER: 'Niger',\n        NGA: 'Nigeria', NIC: 'Nicaragua', NIU: 'Niue', NLD: 'Netherlands',\n        NOR: 'Norway', NPL: 'Nepal', NRU: 'Nauru', NZL: 'New Zealand',\n        OMN: 'Oman', PAK: 'Pakistan', PAN: 'Panama', PER: 'Peru',\n        PHL: 'Philippines', PLW: 'Palau', PNG: 'Papua New Guinea', POL: 'Poland',\n        PRI: 'Puerto Rico', PRK: 'North Korea', PRT: 'Portugal', PRY: 'Paraguay',\n        PSE: 'Palestine', PYF: 'French Polynesia', QAT: 'Qatar', REU: 'Reunion',\n        ROU: 'Romania', RUS: 'Russia', RWA: 'Rwanda', SAU: 'Saudi Arabia',\n        SDF: 'Sudan', SDN: 'Sudan', SEN: 'Senegal', SGP: 'Singapore',\n        SHN: 'Saint Helena', SLB: 'Solomon Islands', SLE: 'Sierra Leone',\n        SLV: 'El Salvador', SMR: 'San Marino', SOM: 'Somalia',\n        SPM: 'Saint Pierre and Miquelon', SRB: 'Serbia', SSD: 'South Sudan',\n        STP: 'Sao Tome and Principe', SUR: 'Suriname', SVK: 'Slovakia',\n        SVN: 'Slovenia', SWE: 'Sweden', SWZ: 'Eswatini', SXM: 'Sint Maarten',\n        SYC: 'Seychelles', SYR: 'Syria', TCA: 'Turks and Caicos Islands',\n        TCD: 'Chad', TGO: 'Togo', THA: 'Thailand', TJK: 'Tajikistan',\n        TKL: 'Tokelau', TKM: 'Turkmenistan', TLS: 'Timor-Leste', TON: 'Tonga',\n        TTO: 'Trinidad and Tobago', TUN: 'Tunisia', TUR: 'Türkiye (Turkey)',\n        TUV: 'Tuvalu', TZA: 'Tanzania', UGA: 'Uganda', UKR: 'Ukraine',\n        URY: 'Uruguay', USA: 'United States of America', UZB: 'Uzbekistan',\n        VCT: 'Saint Vincent and the Grenadines', VEN: 'Venezuela',\n        VGB: 'British Virgin Islands', VIR: 'Virgin Islands', VNM: 'Vietnam',\n        VUT: 'Vanuatu', WSM: 'Samoa', YEM: 'Yemen', ZAF: 'South Africa',\n        ZMB: 'Zambia', ZWE: 'Zimbabwe'\n      }\n      \n      tooltip\n      .style(\"opacity\", 0.8)\n      .html(d.total == -1 ? \"No data\" : conversionHash[d.id] + \": \" + d.total)\n      .style(\"left\", (d3.event.pageX + 30) + \"px\")  \n      .style(\"top\", (d3.event.pageY - 30) + \"px\");\n    }\n  \n    let mouseLeave = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", .8)\n        .style(\"stroke\", \"transparent\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"stroke\", \"transparent\")\n\n      tooltip\n        .style(\"opacity\", 0)\n    }\n    function eventHandler(e) {\n      const country = e.target;\n    \n      country.style.stroke = \"red\";\n    }\n\n    svg2.append(\"g\")\n      .selectAll(\"path\")\n      .data(topo.features)\n      .enter()\n      .append(\"path\")\n        // draw each country\n        .attr(\"d\", d3.geoPath()\n          .projection(projection)\n        )\n        // set the color of each country\n        .attr(\"fill\", function (d) {\n          d.total = data.get(d.id);\n          if (d.total === undefined || d.total == null) d.total = -1;\n          return colorScale(d.total);\n        })\n        .style(\"stroke\", \"transparent\")\n        .attr(\"class\", function(d){ return \"Country\" } )\n        .style(\"opacity\", .8)\n        .on(\"mouseover\", mouseOver )\n        .on(\"mouseleave\", mouseLeave )\n      }\n\n\n  </script>\n\n</svg2>`;\n}\nfunction htmlString2(chosenDisease, chosenYear) {\n  return `<svg id=\"my_dataviz\" width=\"850\" height=\"450\">\n<script>\n  \n  d3.queue()\n    .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\n    .defer(d3.csv, \\`./src/scripts/data/${chosenDisease}.csv\\`, function(d) { if (d.year==\\`${chosenYear}\\`) {data.set(d.name, +d.cases)}; })\n    .await(ready);\n  \n\n    \n  </script>\n\n</svg>`;\n}\nvar setInnerHTML = function (elm, html) {\n  elm.innerHTML = html;\n  Array.from(elm.querySelectorAll(\"script\")).forEach(oldScript => {\n    const newScript = document.createElement(\"script\");\n    Array.from(oldScript.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value));\n    newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n    oldScript.parentNode.replaceChild(newScript, oldScript);\n  });\n};\nclass Map {\n  constructor(ele) {\n    this.ele = ele;\n    this.year = 2020;\n    this.disease = 'malaria';\n    this.min = 2000;\n    this.max = 2020;\n    setInnerHTML(this.ele, htmlString());\n    const sidebar = document.getElementById(\"context\");\n    this.sidebar = new _sidebar_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](sidebar);\n    let slider = document.getElementById(\"myRange\");\n    this.minYear = document.getElementById(\"minyear\");\n    this.maxYear = document.getElementById(\"maxyear\");\n    slider.map = this;\n    this.slider = slider;\n    slider.oninput = function () {\n      this.map.resetMap(this.disease, this.value);\n      const html = svg._groups[0][0].innerHTML.split('<g>');\n      if (html.length > 2) {\n        svg._groups[0][0].innerHTML = [html[1], html[2]].join('<g>');\n      }\n    };\n    this.resetMap(\"malaria\", 2020);\n  }\n  resetMap(disease, year) {\n    this.disease = disease;\n    this.year = year;\n    if (disease == 'polio') {\n      this.min = 2016;\n      this.max = 2021;\n    } else if (disease == 'leprosy') {\n      this.min = 2012;\n      this.max = 2021;\n    } else {\n      if (disease == 'covid19') {\n        this.min = 2020;\n        this.max = 2021;\n      } else if (disease == 'guineaworm') {\n        this.min = 1989;\n        this.max = 2021;\n      } else {\n        if (disease == 'malaria') {\n          this.min = 2000;\n          this.max = 2020;\n        } else {\n          this.min = 2000;\n          this.max = 2021;\n        }\n      }\n    }\n    // setInnerHTML(this.ele, htmlString2(\"nulldata\",2020));\n    if (this.year > this.max) this.year = this.max;\n    if (this.year < this.min) this.year = this.min;\n    setInnerHTML(this.ele, htmlString2(this.disease, this.year));\n    this.sidebar.resetSidebar(this.disease, this.year);\n    this.slider.disease = disease;\n    this.minYear.innerHTML = `${this.min}`;\n    this.maxYear.innerHTML = `${this.max}`;\n    this.slider.min = this.min;\n    this.slider.max = this.max;\n    this.slider.value = this.year;\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Map);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9tYXAuanMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBbUM7QUFFbkMsU0FBU0MsVUFBVSxHQUFHO0VBQ3BCLE9BQVE7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFBQTtBQUVQLFNBQVNDLFdBQVcsR0FBRztFQUNyQixPQUFRO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUFBO0FBSVIsU0FBU0MsV0FB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QzFCLFlBQVksQ0FBQyxJQUFJLENBQUN1QixHQUFHLEVBQUUxQixXQUFXLENBQUMsSUFBSSxDQUFDNEIsT0FBTyxFQUFFLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUM7SUFDNUQsSUFBSSxDQUFDSSxPQUFPLENBQUNhLFlBQVksQ0FBQyxJQUFJLENBQUNoQixPQUFPLEVBQUUsSUFBSSxDQUFDRCxJQUFJLENBQUM7SUFDbEQsSUFBSSxDQUFDTSxNQUFNLENBQUNMLE9BQU8sR0FBR0EsT0FBTztJQUM3QixJQUFJLENBQUNNLE9BQU8sQ0FBQzVCLFNBQVMsR0FBSSxHQUFFLElBQUksQ0FBQ3VCLEdBQUksRUFBQztJQUN0QyxJQUFJLENBQUNNLE9BQU8sQ0FBQzdCLFNBQVMsR0FBSSxHQUFFLElBQUksQ0FBQ3dCLEdBQUksRUFBQztJQUN0QyxJQUFJLENBQUNHLE1BQU0sQ0FBQ0osR0FBRyxHQUFHLElBQUksQ0FBQ0EsR0FBRztJQUMxQixJQUFJLENBQUNJLE1BQU0sQ0FBQ0gsR0FBRyxHQUFHLElBQUksQ0FBQ0EsR0FBRztJQUMxQixJQUFJLENBQUNHLE1BQU0sQ0FBQ2QsS0FBSyxHQUFHLElBQUksQ0FBQ1EsSUFBSTtFQUMvQjtBQUNGO0FBRUEsK0RBQWVILEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0X2dsb2JhbF9oZWFsdGgvLi9zcmMvc2NyaXB0cy9tYXAuanM/ZjU2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2lkZWJhciBmcm9tIFwiLi9zaWRlYmFyLmpzXCI7XG5cbmZ1bmN0aW9uIGh0bWxTdHJpbmcoKSB7XG4gIHJldHVybiBgPHN2ZyBpZD1cIm15X2RhdGF2aXpcIj5cbjxzY3JpcHQ+XG4gIGxldCBzdmcgPSBkMy5zZWxlY3QoXCJzdmdcIik7XG5cbiAgbGV0IHRvb2x0aXAgPSBkMy5zZWxlY3QoXCIjdG9vbHRpcFwiKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMClcbiAgICAuYXR0cihcImNsYXNzXCIsIFwidG9vbHRpcFwiKVxuICAgIC5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgXCJ3aGl0ZVwiKVxuICAgIC5zdHlsZShcImJvcmRlclwiLCBcInNvbGlkXCIpXG4gICAgLnN0eWxlKFwiYm9yZGVyLXdpZHRoXCIsIFwiMXB4XCIpXG4gICAgLnN0eWxlKFwiYm9yZGVyLXJhZGl1c1wiLCBcIjVweFwiKVxuICAgIC5zdHlsZShcInBhZGRpbmdcIiwgXCI1cHhcIilcbiAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gIFxuICBjb25zdCBwYXRoID0gZDMuZ2VvUGF0aCgpO1xuICBjb25zdCBwcm9qZWN0aW9uID0gZDMuZ2VvTmF0dXJhbEVhcnRoMSgpXG4gICAgLnNjYWxlKDE1MClcbiAgICAuY2VudGVyKFswLDBdKVxuICBcbiAgY29uc3QgZGF0YSA9IGQzLm1hcCgpO1xuICBjb25zdCBjb2xvclNjYWxlID0gZDMuc2NhbGVUaHJlc2hvbGQoKVxuICAgIC5kb21haW4oWy0xLDAsMSwzLDEwLDMwLDEwMCwzMDAsMTAwMCwzMDAwLDEwMDAwLDMwMDAwLDEwMDAwMCwzMDAwMDAsMTAwMDAwMF0pXG4gICAgLnJhbmdlKFsnI0ZGRkZGRicsJyM4ODg4ODgnLCcjZmZmN2VjJywgJyNmZWVkZDUnLCcjZmVlM2JkJywgJyNmZGQ2YTUnLFxuICAgICcjZmRjNzkxJywgJyNmZGIyN2MnLCcjZmI5ODY1JywgJyNmNjdkNTMnLCcjZWQ2MjQzJywgJyNkZjQzMmUnLFxuICAgICcjY2MyMzE3JywgJyNiNTBiMDcnLCcjOTcwMTAxJywgJyM3ZjAwMDAnXSk7XG5cbiAgZDMucXVldWUoKVxuICAgIC5kZWZlcihkMy5qc29uLCBcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ob2x0enkvRDMtZ3JhcGgtZ2FsbGVyeS9tYXN0ZXIvREFUQS93b3JsZC5nZW9qc29uXCIpXG4gICAgLmRlZmVyKGQzLmNzdiwgXFxgLi9zcmMvc2NyaXB0cy9kYXRhL21hbGFyaWEuY3N2XFxgLCBmdW5jdGlvbihkKSB7IGlmIChkLnllYXI9PTIwMjApIHtkYXRhLnNldChkLm5hbWUsICtkLmNhc2VzKX07IH0pXG4gICAgLmF3YWl0KHJlYWR5KTtcbiAgXG4gIGZ1bmN0aW9uIHJlYWR5KGVycm9yLCB0b3BvKSB7XG4gIFxuICAgIGxldCBtb3VzZU92ZXIgPSBmdW5jdGlvbihkKSB7XG4gICAgICBkMy5zZWxlY3RBbGwoXCIuQ291bnRyeVwiKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbigyMDApXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgLjUpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcImJsYWNrXCIpXG4gICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oMjAwKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcImJsYWNrXCIpO1xuICAgICAgICBcblxuICAgICAgY29uc3QgY29udmVyc2lvbkhhc2ggPSB7XG4gICAgICAgIEFCVzogJ0FydWJhJywgQUZHOiAnQWZnaGFuaXN0YW4nLCBBR086ICdBbmdvbGEnLCBBSUE6ICdBbmd1aWxsYScsXG4gICAgICAgIEFMQjogJ0FsYmFuaWEnLCBBTkQ6ICdBbmRvcnJhJywgQVJFOiAnVW5pdGVkIEFyYWIgRW1pcmF0ZXMnLFxuICAgICAgICBBUkc6ICdBcmdlbnRpbmEnLCBBUk06ICdBcm1lbmlhJywgQVNNOiAnQW1lcmljYW4gU2Ftb2EnLFxuICAgICAgICBBVEc6ICdBbnRpZ3VhIGFuZCBCYXJidWRhJywgQVVTOiAnQXVzdHJhbGlhJyxBVVQ6ICdBdXN0cmlhJyxcbiAgICAgICAgQVpFOiAnQXplcmJhaWphbicsIEJESTogJ0J1cnVuZGknLCBCRUw6ICdCZWxnaXVtJywgQkVOOiAnQmVuaW4nLFxuICAgICAgICBCRkE6ICdCdXJraW5hIEZhc28nLCBCR0Q6ICdCYW5nbGFkZXNoJywgQkdSOiAnQnVsZ2FyaWEnLCBCSFI6ICdCYWhyYWluJyxcbiAgICAgICAgQkhTOiAnQmFoYW1hcycsIEJJSDogJ0Jvc25pYSBhbmQgSGVyemVnb3ZpbmEnLCBCTFI6ICdCZWxhcnVzJyxcbiAgICAgICAgQkxaOiAnQmVsaXplJywgQk1VOiAnQmVybXVkYScsIEJPTDogJ0JvbGl2aWEnLCBCUkE6ICdCcmF6aWwnLFxuICAgICAgICBCUkI6ICdCYXJiYWRvcycsIEJSTjogJ0JydW5laScsIEJUTjogJ0JodXRhbicsIEJXQTogJ0JvdHN3YW5hJyxcbiAgICAgICAgQ0FGOiAnQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljJywgQ0FOOiAnQ2FuYWRhJywgQ0hFOiAnU3dpdHplcmxhbmQnLFxuICAgICAgICBDSEk6ICdDaGFubmVsIGlzbGFuZHMnLCBDSEw6ICdDaGlsZScsIENITjogJ0NoaW5hJywgQ0lWOiBcIkPDtHRlIGQnSXZvaXJlXCIsXG4gICAgICAgIENNUjogJ0NhbWVyb29uJywgQ09EOiAnRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGUgQ29uZ28nLCBDT0c6ICdDb25nbycsXG4gICAgICAgIENPSzogJ0Nvb2sgSXNsYW5kcycsIENPTDogJ0NvbG9tYmlhJywgQ09NOiAnQ29tb3JvcycsIENQVjogJ0NhYm8gVmVyZGUnLFxuICAgICAgICBDUkk6ICdDb3N0YSBSaWNhJywgQ1VCOiAnQ3ViYScsIENVVzogJ0N1cmHDp2FvJywgQ1lNOiAnQ2F5bWFuIElzbGFuZHMnLFxuICAgICAgICBDWVA6ICdDeXBydXMnLCBDWkU6ICdDemVjaGlhJywgREVVOiAnR2VybWFueScsIERKSTogJ0RqaWJvdXRpJywgRE1BOiAnRG9taW5pY2EnLFxuICAgICAgICBETks6ICdEZW5tYXJrJywgRE9NOiAnRG9taW5pY2FuIFJlcHVibGljJywgRFpBOiAnQWxnZXJpYScsIEVDVTogJ0VjdWFkb3InLFxuICAgICAgICBFR1k6ICdFZ3lwdCcsIEVSSTogJ0VyaXRyZWEnLCBFU0g6ICdXZXN0ZXJuIFNhaGFyYScsIEVTUDogJ1NwYWluJyxcbiAgICAgICAgRVNUOiAnRXN0b25pYScsIEVUSDogJ0V0aGlvcGlhJywgRklOOiAnRmlubGFuZCcsIEZKSTogJ0ZpamknLFxuICAgICAgICBGTEs6ICdGYWxrbGFuZCBJc2xhbmRzIChNYWx2aW5hcyknLCBGUkE6ICdGcmFuY2UnLCBGUk86ICdGYXJvZSBJc2xhbmRzJyxcbiAgICAgICAgRlNNOiAnTWljcm9uZXNpYScsIEdBQjogJ0dhYm9uJywgR0JSOiAnVW5pdGVkIEtpbmdkb20nLCBHRU86ICdHZW9yZ2lhJyxcbiAgICAgICAgR0hBOiAnR2hhbmEnLCBHSUI6ICdHaWJyYWx0YXInLCBHSU46ICdHdWluZWEnLCBHTFA6ICdHdWFkZWxvdXBlJyxcbiAgICAgICAgR01COiAnR2FtYmlhJywgR05COiAnR3VpbmVhLUJpc3NhdScsIEdOUTogJ0VxdWF0b3JpYWwgR3VpbmVhJywgR1JDOiAnR3JlZWNlJyxcbiAgICAgICAgR1JEOiAnR3JlbmFkYScsIEdSTDogJ0dyZWVubGFuZCcsIEdUTTogJ0d1YXRlbWFsYScsIEdVRjogJ0ZyZW5jaCBHdWlhbmEnLFxuICAgICAgICBHVU06ICdHdWFtJywgR1VZOiAnR3V5YW5hJywgSEtHOiAnSG9uZyBLb25nJywgSE5EOiAnSG9uZHVyYXMnLFxuICAgICAgICBIUlY6ICdDcm9hdGlhJywgSFRJOiAnSGFpdGknLCBIVU46ICdIdW5nYXJ5JywgSUROOiAnSW5kb25lc2lhJyxcbiAgICAgICAgSU1OOiAnSXNsZSBvZiBNYW4nLCBJTkQ6ICdJbmRpYScsIElSTDogJ0lyZWxhbmQnLCBJUk46ICdJcmFuJywgSVJROiAnSXJhcScsXG4gICAgICAgIElTTDogJ0ljZWxhbmQnLCBJU1I6ICdJc3JhZWwnLCBJVEE6ICdJdGFseScsIEpBTTogJ0phbWFpY2EnLCBKT1I6ICdKb3JkYW4nLFxuICAgICAgICBKUE46ICdKYXBhbicsIEtBWjogJ0themFraHN0YW4nLCBLRU46ICdLZW55YScsIEtHWjogJ0t5cmd5enN0YW4nLFxuICAgICAgICBLSE06ICdDYW1ib2RpYScsIEtJUjogJ0tpcmliYXRpJywgS05BOiAnU2FpbnQgS2l0dHMgYW5kIE5ldmlzJyxcbiAgICAgICAgS09SOiAnU291dGggS29yZWEnLCBLV1Q6ICdLdXdhaXQnLCBMQU86ICdMYW9zJywgTEJOOiAnTGViYW5vbicsXG4gICAgICAgIExCUjogJ0xpYmVyaWEnLCBMQlk6ICdMaWJ5YScsIExDQTogJ1NhaW50IEx1Y2lhJywgTElFOiAnTGllY2h0ZW5zdGVpbicsXG4gICAgICAgIExLQTogJ1NyaSBMYW5rYScsIExTTzogJ0xlc290aG8nLCBMVFU6ICdMaXRodWFuaWEnLCBMVVg6ICdMdXhlbWJvdXJnJyxcbiAgICAgICAgTFZBOiAnTGF0dmlhJywgTUFDOiAnTWFjYW8nLCBNQVI6ICdNb3JvY2NvJywgTUNPOiAnTW9uYWNvJywgTURBOiAnTW9sZG92YScsXG4gICAgICAgIE1ERzogJ01hZGFnYXNjYXInLCBNRFY6ICdNYWxkaXZlcycsIE1FMTogJ1NlcmJpYSBhbmQgTW9udGVuZWdybycsXG4gICAgICAgIE1FWDogJ01leGljbycsIE1ITDogJ01hcnNoYWxsIElzbGFuZHMnLCBNS0Q6ICdOb3J0aCBNYWNlZG9uaWEnLCBNTEk6ICdNYWxpJyxcbiAgICAgICAgTUxUOiAnTWFsdGEnLCBNTVI6ICdNeWFubWFyJywgTU5FOiAnTW9udGVuZWdybycsIE1ORzogJ01vbmdvbGlhJyxcbiAgICAgICAgTU5QOiAnTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzJywgTU9aOiAnTW96YW1iaXF1ZScsIE1SVDogJ01hdXJpdGFuaWEnLFxuICAgICAgICBNVFE6ICdNYXJ0aW5pcXVlJywgTVVTOiAnTWF1cml0aXVzJywgTVdJOiAnTWFsYXdpJywgTVlTOiAnTWFsYXlzaWEnLFxuICAgICAgICBNWVQ6ICdNYXlvdHRlJywgTkFNOiAnTmFtaWJpYScsIE5DTDogJ05ldyBDYWxlZG9uaWEnLCBORVI6ICdOaWdlcicsXG4gICAgICAgIE5HQTogJ05pZ2VyaWEnLCBOSUM6ICdOaWNhcmFndWEnLCBOSVU6ICdOaXVlJywgTkxEOiAnTmV0aGVybGFuZHMnLFxuICAgICAgICBOT1I6ICdOb3J3YXknLCBOUEw6ICdOZXBhbCcsIE5SVTogJ05hdXJ1JywgTlpMOiAnTmV3IFplYWxhbmQnLFxuICAgICAgICBPTU46ICdPbWFuJywgUEFLOiAnUGFraXN0YW4nLCBQQU46ICdQYW5hbWEnLCBQRVI6ICdQZXJ1JyxcbiAgICAgICAgUEhMOiAnUGhpbGlwcGluZXMnLCBQTFc6ICdQYWxhdScsIFBORzogJ1BhcHVhIE5ldyBHdWluZWEnLCBQT0w6ICdQb2xhbmQnLFxuICAgICAgICBQUkk6ICdQdWVydG8gUmljbycsIFBSSzogJ05vcnRoIEtvcmVhJywgUFJUOiAnUG9ydHVnYWwnLCBQUlk6ICdQYXJhZ3VheScsXG4gICAgICAgIFBTRTogJ1BhbGVzdGluZScsIFBZRjogJ0ZyZW5jaCBQb2x5bmVzaWEnLCBRQVQ6ICdRYXRhcicsIFJFVTogJ1JldW5pb24nLFxuICAgICAgICBST1U6ICdSb21hbmlhJywgUlVTOiAnUnVzc2lhJywgUldBOiAnUndhbmRhJywgU0FVOiAnU2F1ZGkgQXJhYmlhJyxcbiAgICAgICAgU0RGOiAnU3VkYW4nLCBTRE46ICdTdWRhbicsIFNFTjogJ1NlbmVnYWwnLCBTR1A6ICdTaW5nYXBvcmUnLFxuICAgICAgICBTSE46ICdTYWludCBIZWxlbmEnLCBTTEI6ICdTb2xvbW9uIElzbGFuZHMnLCBTTEU6ICdTaWVycmEgTGVvbmUnLFxuICAgICAgICBTTFY6ICdFbCBTYWx2YWRvcicsIFNNUjogJ1NhbiBNYXJpbm8nLCBTT006ICdTb21hbGlhJyxcbiAgICAgICAgU1BNOiAnU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvbicsIFNSQjogJ1NlcmJpYScsIFNTRDogJ1NvdXRoIFN1ZGFuJyxcbiAgICAgICAgU1RQOiAnU2FvIFRvbWUgYW5kIFByaW5jaXBlJywgU1VSOiAnU3VyaW5hbWUnLCBTVks6ICdTbG92YWtpYScsXG4gICAgICAgIFNWTjogJ1Nsb3ZlbmlhJywgU1dFOiAnU3dlZGVuJywgU1daOiAnRXN3YXRpbmknLCBTWE06ICdTaW50IE1hYXJ0ZW4nLFxuICAgICAgICBTWUM6ICdTZXljaGVsbGVzJywgU1lSOiAnU3lyaWEnLCBUQ0E6ICdUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHMnLFxuICAgICAgICBUQ0Q6ICdDaGFkJywgVEdPOiAnVG9nbycsIFRIQTogJ1RoYWlsYW5kJywgVEpLOiAnVGFqaWtpc3RhbicsXG4gICAgICAgIFRLTDogJ1Rva2VsYXUnLCBUS006ICdUdXJrbWVuaXN0YW4nLCBUTFM6ICdUaW1vci1MZXN0ZScsIFRPTjogJ1RvbmdhJyxcbiAgICAgICAgVFRPOiAnVHJpbmlkYWQgYW5kIFRvYmFnbycsIFRVTjogJ1R1bmlzaWEnLCBUVVI6ICdUw7xya2l5ZSAoVHVya2V5KScsXG4gICAgICAgIFRVVjogJ1R1dmFsdScsIFRaQTogJ1RhbnphbmlhJywgVUdBOiAnVWdhbmRhJywgVUtSOiAnVWtyYWluZScsXG4gICAgICAgIFVSWTogJ1VydWd1YXknLCBVU0E6ICdVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EnLCBVWkI6ICdVemJla2lzdGFuJyxcbiAgICAgICAgVkNUOiAnU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXMnLCBWRU46ICdWZW5lenVlbGEnLFxuICAgICAgICBWR0I6ICdCcml0aXNoIFZpcmdpbiBJc2xhbmRzJywgVklSOiAnVmlyZ2luIElzbGFuZHMnLCBWTk06ICdWaWV0bmFtJyxcbiAgICAgICAgVlVUOiAnVmFudWF0dScsIFdTTTogJ1NhbW9hJywgWUVNOiAnWWVtZW4nLCBaQUY6ICdTb3V0aCBBZnJpY2EnLFxuICAgICAgICBaTUI6ICdaYW1iaWEnLCBaV0U6ICdaaW1iYWJ3ZSdcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdG9vbHRpcFxuICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjgpXG4gICAgICAuaHRtbChkLnRvdGFsID09IC0xID8gXCJObyBkYXRhXCIgOiBjb252ZXJzaW9uSGFzaFtkLmlkXSArIFwiOiBcIiArIGQudG90YWwpXG4gICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDMwKSArIFwicHhcIikgIFxuICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDMwKSArIFwicHhcIik7XG4gICAgfVxuICBcbiAgICBsZXQgbW91c2VMZWF2ZSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5Db3VudHJ5XCIpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDIwMClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAuOClcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIilcbiAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbigyMDApXG4gICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpXG5cbiAgICAgIHRvb2x0aXBcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKVxuICAgIH1cbiAgICBmdW5jdGlvbiBldmVudEhhbmRsZXIoZSkge1xuICAgICAgY29uc3QgY291bnRyeSA9IGUudGFyZ2V0O1xuICAgIFxuICAgICAgY291bnRyeS5zdHlsZS5zdHJva2UgPSBcInJlZFwiO1xuICAgIH1cblxuXG4gICAgc3ZnLmFwcGVuZChcImdcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJwYXRoXCIpXG4gICAgICAuZGF0YSh0b3BvLmZlYXR1cmVzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgIC8vIGRyYXcgZWFjaCBjb3VudHJ5XG4gICAgICAgIC5hdHRyKFwiZFwiLCBkMy5nZW9QYXRoKClcbiAgICAgICAgICAucHJvamVjdGlvbihwcm9qZWN0aW9uKVxuICAgICAgICApXG4gICAgICAgIC8vIHNldCB0aGUgY29sb3Igb2YgZWFjaCBjb3VudHJ5XG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIGQudG90YWwgPSBkYXRhLmdldChkLmlkKTtcbiAgICAgICAgICBpZiAoZC50b3RhbCA9PT0gdW5kZWZpbmVkIHx8IGQudG90YWwgPT0gbnVsbCkgZC50b3RhbCA9IC0xO1xuICAgICAgICAgIHJldHVybiBjb2xvclNjYWxlKGQudG90YWwpO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJ0cmFuc3BhcmVudFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpeyByZXR1cm4gXCJDb3VudHJ5XCIgfSApXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIG1vdXNlT3ZlciApXG4gICAgICAgIC5vbihcIm1vdXNlbGVhdmVcIiwgbW91c2VMZWF2ZSApXG4gICAgICB9XG5cblxuICA8L3NjcmlwdD5cblxuPC9zdmc+YH1cblxuZnVuY3Rpb24gaHRtbFN0cmluZzAoKSB7XG4gIHJldHVybiBgPHN2ZzIgaWQ9XCJjb3B5XCI+XG48c2NyaXB0PlxuICBsZXQgc3ZnMiA9IGQzLnNlbGVjdChcInN2Z1wiKTtcblxuICBsZXQgdG9vbHRpcCA9IGQzLnNlbGVjdChcIiN0b29sdGlwXCIpXG4gICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0b29sdGlwXCIpXG4gICAgLnN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIndoaXRlXCIpXG4gICAgLnN0eWxlKFwiYm9yZGVyXCIsIFwic29saWRcIilcbiAgICAuc3R5bGUoXCJib3JkZXItd2lkdGhcIiwgXCIxcHhcIilcbiAgICAuc3R5bGUoXCJib3JkZXItcmFkaXVzXCIsIFwiNXB4XCIpXG4gICAgLnN0eWxlKFwicGFkZGluZ1wiLCBcIjVweFwiKVxuICAgIC5zdHlsZShcInBvc2l0aW9uXCIsIFwiYWJzb2x1dGVcIilcbiAgXG4gIGNvbnN0IHBhdGggPSBkMy5nZW9QYXRoKCk7XG4gIGNvbnN0IHByb2plY3Rpb24gPSBkMy5nZW9OYXR1cmFsRWFydGgxKClcbiAgICAuc2NhbGUoMTUwKVxuICAgIC5jZW50ZXIoWzAsMF0pXG4gIFxuICBjb25zdCBkYXRhID0gZDMubWFwKCk7XG4gIGNvbnN0IGNvbG9yU2NhbGUgPSBkMy5zY2FsZVRocmVzaG9sZCgpXG4gICAgLmRvbWFpbihbLTEsMCwxLDMsMTAsMzAsMTAwLDMwMCwxMDAwLDMwMDAsMTAwMDAsMzAwMDAsMTAwMDAwLDMwMDAwMCwxMDAwMDAwXSlcbiAgICAucmFuZ2UoWycjRkZGRkZGJywnIzg4ODg4OCcsJyNmZmY3ZWMnLCAnI2ZlZWRkNScsJyNmZWUzYmQnLCAnI2ZkZDZhNScsXG4gICAgJyNmZGM3OTEnLCAnI2ZkYjI3YycsJyNmYjk4NjUnLCAnI2Y2N2Q1MycsJyNlZDYyNDMnLCAnI2RmNDMyZScsXG4gICAgJyNjYzIzMTcnLCAnI2I1MGIwNycsJyM5NzAxMDEnLCAnIzdmMDAwMCddKTtcblxuICBkMy5xdWV1ZSgpXG4gICAgLmRlZmVyKGQzLmpzb24sIFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hvbHR6eS9EMy1ncmFwaC1nYWxsZXJ5L21hc3Rlci9EQVRBL3dvcmxkLmdlb2pzb25cIilcbiAgICAuZGVmZXIoZDMuY3N2LCBcXGAuL3NyYy9zY3JpcHRzL2RhdGEvbWFsYXJpYS5jc3ZcXGAsIGZ1bmN0aW9uKGQpIHsgaWYgKGQueWVhcj09MjAyMCkge2RhdGEuc2V0KGQubmFtZSwgK2QuY2FzZXMpfTsgfSlcbiAgICAuYXdhaXQocmVhZHkpO1xuICBcbiAgZnVuY3Rpb24gcmVhZHkoZXJyb3IsIHRvcG8pIHtcbiAgXG4gICAgbGV0IG1vdXNlT3ZlciA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5Db3VudHJ5XCIpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDIwMClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAuNSlcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiYmxhY2tcIilcbiAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbigyMDApXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiYmxhY2tcIik7XG4gICAgICAgIFxuXG4gICAgICBjb25zdCBjb252ZXJzaW9uSGFzaCA9IHtcbiAgICAgICAgQUJXOiAnQXJ1YmEnLCBBRkc6ICdBZmdoYW5pc3RhbicsIEFHTzogJ0FuZ29sYScsIEFJQTogJ0FuZ3VpbGxhJyxcbiAgICAgICAgQUxCOiAnQWxiYW5pYScsIEFORDogJ0FuZG9ycmEnLCBBUkU6ICdVbml0ZWQgQXJhYiBFbWlyYXRlcycsXG4gICAgICAgIEFSRzogJ0FyZ2VudGluYScsIEFSTTogJ0FybWVuaWEnLCBBU006ICdBbWVyaWNhbiBTYW1vYScsXG4gICAgICAgIEFURzogJ0FudGlndWEgYW5kIEJhcmJ1ZGEnLCBBVVM6ICdBdXN0cmFsaWEnLEFVVDogJ0F1c3RyaWEnLFxuICAgICAgICBBWkU6ICdBemVyYmFpamFuJywgQkRJOiAnQnVydW5kaScsIEJFTDogJ0JlbGdpdW0nLCBCRU46ICdCZW5pbicsXG4gICAgICAgIEJGQTogJ0J1cmtpbmEgRmFzbycsIEJHRDogJ0JhbmdsYWRlc2gnLCBCR1I6ICdCdWxnYXJpYScsIEJIUjogJ0JhaHJhaW4nLFxuICAgICAgICBCSFM6ICdCYWhhbWFzJywgQklIOiAnQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYScsIEJMUjogJ0JlbGFydXMnLFxuICAgICAgICBCTFo6ICdCZWxpemUnLCBCTVU6ICdCZXJtdWRhJywgQk9MOiAnQm9saXZpYScsIEJSQTogJ0JyYXppbCcsXG4gICAgICAgIEJSQjogJ0JhcmJhZG9zJywgQlJOOiAnQnJ1bmVpJywgQlROOiAnQmh1dGFuJywgQldBOiAnQm90c3dhbmEnLFxuICAgICAgICBDQUY6ICdDZW50cmFsIEFmcmljYW4gUmVwdWJsaWMnLCBDQU46ICdDYW5hZGEnLCBDSEU6ICdTd2l0emVybGFuZCcsXG4gICAgICAgIENISTogJ0NoYW5uZWwgaXNsYW5kcycsIENITDogJ0NoaWxlJywgQ0hOOiAnQ2hpbmEnLCBDSVY6IFwiQ8O0dGUgZCdJdm9pcmVcIixcbiAgICAgICAgQ01SOiAnQ2FtZXJvb24nLCBDT0Q6ICdEZW1vY3JhdGljIFJlcHVibGljIG9mIHRoZSBDb25nbycsIENPRzogJ0NvbmdvJyxcbiAgICAgICAgQ09LOiAnQ29vayBJc2xhbmRzJywgQ09MOiAnQ29sb21iaWEnLCBDT006ICdDb21vcm9zJywgQ1BWOiAnQ2FibyBWZXJkZScsXG4gICAgICAgIENSSTogJ0Nvc3RhIFJpY2EnLCBDVUI6ICdDdWJhJywgQ1VXOiAnQ3VyYcOnYW8nLCBDWU06ICdDYXltYW4gSXNsYW5kcycsXG4gICAgICAgIENZUDogJ0N5cHJ1cycsIENaRTogJ0N6ZWNoaWEnLCBERVU6ICdHZXJtYW55JywgREpJOiAnRGppYm91dGknLCBETUE6ICdEb21pbmljYScsXG4gICAgICAgIEROSzogJ0Rlbm1hcmsnLCBET006ICdEb21pbmljYW4gUmVwdWJsaWMnLCBEWkE6ICdBbGdlcmlhJywgRUNVOiAnRWN1YWRvcicsXG4gICAgICAgIEVHWTogJ0VneXB0JywgRVJJOiAnRXJpdHJlYScsIEVTSDogJ1dlc3Rlcm4gU2FoYXJhJywgRVNQOiAnU3BhaW4nLFxuICAgICAgICBFU1Q6ICdFc3RvbmlhJywgRVRIOiAnRXRoaW9waWEnLCBGSU46ICdGaW5sYW5kJywgRkpJOiAnRmlqaScsXG4gICAgICAgIEZMSzogJ0ZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKScsIEZSQTogJ0ZyYW5jZScsIEZSTzogJ0Zhcm9lIElzbGFuZHMnLFxuICAgICAgICBGU006ICdNaWNyb25lc2lhJywgR0FCOiAnR2Fib24nLCBHQlI6ICdVbml0ZWQgS2luZ2RvbScsIEdFTzogJ0dlb3JnaWEnLFxuICAgICAgICBHSEE6ICdHaGFuYScsIEdJQjogJ0dpYnJhbHRhcicsIEdJTjogJ0d1aW5lYScsIEdMUDogJ0d1YWRlbG91cGUnLFxuICAgICAgICBHTUI6ICdHYW1iaWEnLCBHTkI6ICdHdWluZWEtQmlzc2F1JywgR05ROiAnRXF1YXRvcmlhbCBHdWluZWEnLCBHUkM6ICdHcmVlY2UnLFxuICAgICAgICBHUkQ6ICdHcmVuYWRhJywgR1JMOiAnR3JlZW5sYW5kJywgR1RNOiAnR3VhdGVtYWxhJywgR1VGOiAnRnJlbmNoIEd1aWFuYScsXG4gICAgICAgIEdVTTogJ0d1YW0nLCBHVVk6ICdHdXlhbmEnLCBIS0c6ICdIb25nIEtvbmcnLCBITkQ6ICdIb25kdXJhcycsXG4gICAgICAgIEhSVjogJ0Nyb2F0aWEnLCBIVEk6ICdIYWl0aScsIEhVTjogJ0h1bmdhcnknLCBJRE46ICdJbmRvbmVzaWEnLFxuICAgICAgICBJTU46ICdJc2xlIG9mIE1hbicsIElORDogJ0luZGlhJywgSVJMOiAnSXJlbGFuZCcsIElSTjogJ0lyYW4nLCBJUlE6ICdJcmFxJyxcbiAgICAgICAgSVNMOiAnSWNlbGFuZCcsIElTUjogJ0lzcmFlbCcsIElUQTogJ0l0YWx5JywgSkFNOiAnSmFtYWljYScsIEpPUjogJ0pvcmRhbicsXG4gICAgICAgIEpQTjogJ0phcGFuJywgS0FaOiAnS2F6YWtoc3RhbicsIEtFTjogJ0tlbnlhJywgS0daOiAnS3lyZ3l6c3RhbicsXG4gICAgICAgIEtITTogJ0NhbWJvZGlhJywgS0lSOiAnS2lyaWJhdGknLCBLTkE6ICdTYWludCBLaXR0cyBhbmQgTmV2aXMnLFxuICAgICAgICBLT1I6ICdTb3V0aCBLb3JlYScsIEtXVDogJ0t1d2FpdCcsIExBTzogJ0xhb3MnLCBMQk46ICdMZWJhbm9uJyxcbiAgICAgICAgTEJSOiAnTGliZXJpYScsIExCWTogJ0xpYnlhJywgTENBOiAnU2FpbnQgTHVjaWEnLCBMSUU6ICdMaWVjaHRlbnN0ZWluJyxcbiAgICAgICAgTEtBOiAnU3JpIExhbmthJywgTFNPOiAnTGVzb3RobycsIExUVTogJ0xpdGh1YW5pYScsIExVWDogJ0x1eGVtYm91cmcnLFxuICAgICAgICBMVkE6ICdMYXR2aWEnLCBNQUM6ICdNYWNhbycsIE1BUjogJ01vcm9jY28nLCBNQ086ICdNb25hY28nLCBNREE6ICdNb2xkb3ZhJyxcbiAgICAgICAgTURHOiAnTWFkYWdhc2NhcicsIE1EVjogJ01hbGRpdmVzJywgTUUxOiAnU2VyYmlhIGFuZCBNb250ZW5lZ3JvJyxcbiAgICAgICAgTUVYOiAnTWV4aWNvJywgTUhMOiAnTWFyc2hhbGwgSXNsYW5kcycsIE1LRDogJ05vcnRoIE1hY2Vkb25pYScsIE1MSTogJ01hbGknLFxuICAgICAgICBNTFQ6ICdNYWx0YScsIE1NUjogJ015YW5tYXInLCBNTkU6ICdNb250ZW5lZ3JvJywgTU5HOiAnTW9uZ29saWEnLFxuICAgICAgICBNTlA6ICdOb3J0aGVybiBNYXJpYW5hIElzbGFuZHMnLCBNT1o6ICdNb3phbWJpcXVlJywgTVJUOiAnTWF1cml0YW5pYScsXG4gICAgICAgIE1UUTogJ01hcnRpbmlxdWUnLCBNVVM6ICdNYXVyaXRpdXMnLCBNV0k6ICdNYWxhd2knLCBNWVM6ICdNYWxheXNpYScsXG4gICAgICAgIE1ZVDogJ01heW90dGUnLCBOQU06ICdOYW1pYmlhJywgTkNMOiAnTmV3IENhbGVkb25pYScsIE5FUjogJ05pZ2VyJyxcbiAgICAgICAgTkdBOiAnTmlnZXJpYScsIE5JQzogJ05pY2FyYWd1YScsIE5JVTogJ05pdWUnLCBOTEQ6ICdOZXRoZXJsYW5kcycsXG4gICAgICAgIE5PUjogJ05vcndheScsIE5QTDogJ05lcGFsJywgTlJVOiAnTmF1cnUnLCBOWkw6ICdOZXcgWmVhbGFuZCcsXG4gICAgICAgIE9NTjogJ09tYW4nLCBQQUs6ICdQYWtpc3RhbicsIFBBTjogJ1BhbmFtYScsIFBFUjogJ1BlcnUnLFxuICAgICAgICBQSEw6ICdQaGlsaXBwaW5lcycsIFBMVzogJ1BhbGF1JywgUE5HOiAnUGFwdWEgTmV3IEd1aW5lYScsIFBPTDogJ1BvbGFuZCcsXG4gICAgICAgIFBSSTogJ1B1ZXJ0byBSaWNvJywgUFJLOiAnTm9ydGggS29yZWEnLCBQUlQ6ICdQb3J0dWdhbCcsIFBSWTogJ1BhcmFndWF5JyxcbiAgICAgICAgUFNFOiAnUGFsZXN0aW5lJywgUFlGOiAnRnJlbmNoIFBvbHluZXNpYScsIFFBVDogJ1FhdGFyJywgUkVVOiAnUmV1bmlvbicsXG4gICAgICAgIFJPVTogJ1JvbWFuaWEnLCBSVVM6ICdSdXNzaWEnLCBSV0E6ICdSd2FuZGEnLCBTQVU6ICdTYXVkaSBBcmFiaWEnLFxuICAgICAgICBTREY6ICdTdWRhbicsIFNETjogJ1N1ZGFuJywgU0VOOiAnU2VuZWdhbCcsIFNHUDogJ1NpbmdhcG9yZScsXG4gICAgICAgIFNITjogJ1NhaW50IEhlbGVuYScsIFNMQjogJ1NvbG9tb24gSXNsYW5kcycsIFNMRTogJ1NpZXJyYSBMZW9uZScsXG4gICAgICAgIFNMVjogJ0VsIFNhbHZhZG9yJywgU01SOiAnU2FuIE1hcmlubycsIFNPTTogJ1NvbWFsaWEnLFxuICAgICAgICBTUE06ICdTYWludCBQaWVycmUgYW5kIE1pcXVlbG9uJywgU1JCOiAnU2VyYmlhJywgU1NEOiAnU291dGggU3VkYW4nLFxuICAgICAgICBTVFA6ICdTYW8gVG9tZSBhbmQgUHJpbmNpcGUnLCBTVVI6ICdTdXJpbmFtZScsIFNWSzogJ1Nsb3Zha2lhJyxcbiAgICAgICAgU1ZOOiAnU2xvdmVuaWEnLCBTV0U6ICdTd2VkZW4nLCBTV1o6ICdFc3dhdGluaScsIFNYTTogJ1NpbnQgTWFhcnRlbicsXG4gICAgICAgIFNZQzogJ1NleWNoZWxsZXMnLCBTWVI6ICdTeXJpYScsIFRDQTogJ1R1cmtzIGFuZCBDYWljb3MgSXNsYW5kcycsXG4gICAgICAgIFRDRDogJ0NoYWQnLCBUR086ICdUb2dvJywgVEhBOiAnVGhhaWxhbmQnLCBUSks6ICdUYWppa2lzdGFuJyxcbiAgICAgICAgVEtMOiAnVG9rZWxhdScsIFRLTTogJ1R1cmttZW5pc3RhbicsIFRMUzogJ1RpbW9yLUxlc3RlJywgVE9OOiAnVG9uZ2EnLFxuICAgICAgICBUVE86ICdUcmluaWRhZCBhbmQgVG9iYWdvJywgVFVOOiAnVHVuaXNpYScsIFRVUjogJ1TDvHJraXllIChUdXJrZXkpJyxcbiAgICAgICAgVFVWOiAnVHV2YWx1JywgVFpBOiAnVGFuemFuaWEnLCBVR0E6ICdVZ2FuZGEnLCBVS1I6ICdVa3JhaW5lJyxcbiAgICAgICAgVVJZOiAnVXJ1Z3VheScsIFVTQTogJ1VuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYScsIFVaQjogJ1V6YmVraXN0YW4nLFxuICAgICAgICBWQ1Q6ICdTYWludCBWaW5jZW50IGFuZCB0aGUgR3JlbmFkaW5lcycsIFZFTjogJ1ZlbmV6dWVsYScsXG4gICAgICAgIFZHQjogJ0JyaXRpc2ggVmlyZ2luIElzbGFuZHMnLCBWSVI6ICdWaXJnaW4gSXNsYW5kcycsIFZOTTogJ1ZpZXRuYW0nLFxuICAgICAgICBWVVQ6ICdWYW51YXR1JywgV1NNOiAnU2Ftb2EnLCBZRU06ICdZZW1lbicsIFpBRjogJ1NvdXRoIEFmcmljYScsXG4gICAgICAgIFpNQjogJ1phbWJpYScsIFpXRTogJ1ppbWJhYndlJ1xuICAgICAgfVxuICAgICAgXG4gICAgICB0b29sdGlwXG4gICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDAuOClcbiAgICAgIC5odG1sKGQudG90YWwgPT0gLTEgPyBcIk5vIGRhdGFcIiA6IGNvbnZlcnNpb25IYXNoW2QuaWRdICsgXCI6IFwiICsgZC50b3RhbClcbiAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMzApICsgXCJweFwiKSAgXG4gICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMzApICsgXCJweFwiKTtcbiAgICB9XG4gIFxuICAgIGxldCBtb3VzZUxlYXZlID0gZnVuY3Rpb24oZCkge1xuICAgICAgZDMuc2VsZWN0QWxsKFwiLkNvdW50cnlcIilcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oMjAwKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIC44KVxuICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJ0cmFuc3BhcmVudFwiKVxuICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDIwMClcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIilcblxuICAgICAgdG9vbHRpcFxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG4gICAgfVxuICAgIGZ1bmN0aW9uIGV2ZW50SGFuZGxlcihlKSB7XG4gICAgICBjb25zdCBjb3VudHJ5ID0gZS50YXJnZXQ7XG4gICAgXG4gICAgICBjb3VudHJ5LnN0eWxlLnN0cm9rZSA9IFwicmVkXCI7XG4gICAgfVxuXG4gICAgc3ZnMi5hcHBlbmQoXCJnXCIpXG4gICAgICAuc2VsZWN0QWxsKFwicGF0aFwiKVxuICAgICAgLmRhdGEodG9wby5mZWF0dXJlcylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAvLyBkcmF3IGVhY2ggY291bnRyeVxuICAgICAgICAuYXR0cihcImRcIiwgZDMuZ2VvUGF0aCgpXG4gICAgICAgICAgLnByb2plY3Rpb24ocHJvamVjdGlvbilcbiAgICAgICAgKVxuICAgICAgICAvLyBzZXQgdGhlIGNvbG9yIG9mIGVhY2ggY291bnRyeVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICBkLnRvdGFsID0gZGF0YS5nZXQoZC5pZCk7XG4gICAgICAgICAgaWYgKGQudG90YWwgPT09IHVuZGVmaW5lZCB8fCBkLnRvdGFsID09IG51bGwpIGQudG90YWwgPSAtMTtcbiAgICAgICAgICByZXR1cm4gY29sb3JTY2FsZShkLnRvdGFsKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKXsgcmV0dXJuIFwiQ291bnRyeVwiIH0gKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIC44KVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgbW91c2VPdmVyIClcbiAgICAgICAgLm9uKFwibW91c2VsZWF2ZVwiLCBtb3VzZUxlYXZlIClcbiAgICAgIH1cblxuXG4gIDwvc2NyaXB0PlxuXG48L3N2ZzI+YH1cblxuXG5cbmZ1bmN0aW9uIGh0bWxTdHJpbmcyKGNob3NlbkRpc2Vhc2UsIGNob3NlblllYXIpIHtcbiAgcmV0dXJuIGA8c3ZnIGlkPVwibXlfZGF0YXZpelwiIHdpZHRoPVwiODUwXCIgaGVpZ2h0PVwiNDUwXCI+XG48c2NyaXB0PlxuICBcbiAgZDMucXVldWUoKVxuICAgIC5kZWZlcihkMy5qc29uLCBcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ob2x0enkvRDMtZ3JhcGgtZ2FsbGVyeS9tYXN0ZXIvREFUQS93b3JsZC5nZW9qc29uXCIpXG4gICAgLmRlZmVyKGQzLmNzdiwgXFxgLi9zcmMvc2NyaXB0cy9kYXRhLyR7Y2hvc2VuRGlzZWFzZX0uY3N2XFxgLCBmdW5jdGlvbihkKSB7IGlmIChkLnllYXI9PVxcYCR7Y2hvc2VuWWVhcn1cXGApIHtkYXRhLnNldChkLm5hbWUsICtkLmNhc2VzKX07IH0pXG4gICAgLmF3YWl0KHJlYWR5KTtcbiAgXG5cbiAgICBcbiAgPC9zY3JpcHQ+XG5cbjwvc3ZnPmB9XG5cblxudmFyIHNldElubmVySFRNTCA9IGZ1bmN0aW9uIChlbG0sIGh0bWwpIHtcbiAgZWxtLmlubmVySFRNTCA9IGh0bWw7XG4gIEFycmF5LmZyb20oZWxtLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzY3JpcHRcIikpLmZvckVhY2gob2xkU2NyaXB0ID0+IHtcbiAgICBjb25zdCBuZXdTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgIEFycmF5LmZyb20ob2xkU2NyaXB0LmF0dHJpYnV0ZXMpXG4gICAgICAuZm9yRWFjaChhdHRyID0+IG5ld1NjcmlwdC5zZXRBdHRyaWJ1dGUoYXR0ci5uYW1lLCBhdHRyLnZhbHVlKSk7XG4gICAgbmV3U2NyaXB0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG9sZFNjcmlwdC5pbm5lckhUTUwpKTtcbiAgICBvbGRTY3JpcHQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3U2NyaXB0LCBvbGRTY3JpcHQpO1xuICB9KTtcbn1cblxuY2xhc3MgTWFwIHtcbiAgY29uc3RydWN0b3IoZWxlKSB7XG4gICAgdGhpcy5lbGUgPSBlbGU7XG4gICAgdGhpcy55ZWFyID0gMjAyMDtcbiAgICB0aGlzLmRpc2Vhc2UgPSAnbWFsYXJpYSc7XG4gICAgdGhpcy5taW4gPSAyMDAwO1xuICAgIHRoaXMubWF4ID0gMjAyMDtcbiAgICBzZXRJbm5lckhUTUwodGhpcy5lbGUsIGh0bWxTdHJpbmcoKSk7XG4gICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGV4dFwiKTtcbiAgICB0aGlzLnNpZGViYXIgPSBuZXcgU2lkZWJhcihzaWRlYmFyKVxuICAgIGxldCBzbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15UmFuZ2VcIik7XG5cbiAgICB0aGlzLm1pblllYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1pbnllYXJcIik7XG4gICAgdGhpcy5tYXhZZWFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXh5ZWFyXCIpO1xuXG4gICAgc2xpZGVyLm1hcCA9IHRoaXM7XG4gICAgdGhpcy5zbGlkZXIgPSBzbGlkZXI7XG5cbiAgICBzbGlkZXIub25pbnB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubWFwLnJlc2V0TWFwKHRoaXMuZGlzZWFzZSwgdGhpcy52YWx1ZSk7XG4gICAgICBjb25zdCBodG1sID0gc3ZnLl9ncm91cHNbMF1bMF0uaW5uZXJIVE1MLnNwbGl0KCc8Zz4nKVxuICAgICAgaWYgKGh0bWwubGVuZ3RoID4gMikge1xuICAgICAgc3ZnLl9ncm91cHNbMF1bMF0uaW5uZXJIVE1MID0gW2h0bWxbMV0saHRtbFsyXV0uam9pbignPGc+JykgfVxuICAgIH1cbiAgICB0aGlzLnJlc2V0TWFwKFwibWFsYXJpYVwiLDIwMjApXG4gIH1cblxuXG4gIHJlc2V0TWFwKGRpc2Vhc2UsIHllYXIpIHtcbiAgICB0aGlzLmRpc2Vhc2UgPSBkaXNlYXNlO1xuICAgIHRoaXMueWVhciA9IHllYXI7XG4gICAgaWYgKGRpc2Vhc2UgPT0gJ3BvbGlvJykge1xuICAgICAgdGhpcy5taW4gPSAyMDE2O1xuICAgICAgdGhpcy5tYXggPSAyMDIxO1xuICAgIH0gZWxzZSBpZiAoZGlzZWFzZSA9PSAnbGVwcm9zeScpIHtcbiAgICAgIHRoaXMubWluID0gMjAxMjtcbiAgICAgIHRoaXMubWF4ID0gMjAyMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRpc2Vhc2UgPT0gJ2NvdmlkMTknKSB7XG4gICAgICAgIHRoaXMubWluID0gMjAyMDtcbiAgICAgICAgdGhpcy5tYXggPSAyMDIxO1xuICAgICAgfSBlbHNlIGlmIChkaXNlYXNlID09ICdndWluZWF3b3JtJykge1xuICAgICAgICB0aGlzLm1pbiA9IDE5ODk7XG4gICAgICAgIHRoaXMubWF4ID0gMjAyMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkaXNlYXNlID09ICdtYWxhcmlhJykge1xuICAgICAgICAgIHRoaXMubWluID0gMjAwMDtcbiAgICAgICAgICB0aGlzLm1heCA9IDIwMjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5taW4gPSAyMDAwO1xuICAgICAgICAgIHRoaXMubWF4ID0gMjAyMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBzZXRJbm5lckhUTUwodGhpcy5lbGUsIGh0bWxTdHJpbmcyKFwibnVsbGRhdGFcIiwyMDIwKSk7XG4gICAgaWYgKHRoaXMueWVhciA+IHRoaXMubWF4KSB0aGlzLnllYXIgPSB0aGlzLm1heDtcbiAgICBpZiAodGhpcy55ZWFyIDwgdGhpcy5taW4pIHRoaXMueWVhciA9IHRoaXMubWluO1xuICAgIHNldElubmVySFRNTCh0aGlzLmVsZSwgaHRtbFN0cmluZzIodGhpcy5kaXNlYXNlLCB0aGlzLnllYXIpKTtcbiAgICB0aGlzLnNpZGViYXIucmVzZXRTaWRlYmFyKHRoaXMuZGlzZWFzZSwgdGhpcy55ZWFyKTtcbiAgICB0aGlzLnNsaWRlci5kaXNlYXNlID0gZGlzZWFzZTtcbiAgICB0aGlzLm1pblllYXIuaW5uZXJIVE1MID0gYCR7dGhpcy5taW59YFxuICAgIHRoaXMubWF4WWVhci5pbm5lckhUTUwgPSBgJHt0aGlzLm1heH1gXG4gICAgdGhpcy5zbGlkZXIubWluID0gdGhpcy5taW47XG4gICAgdGhpcy5zbGlkZXIubWF4ID0gdGhpcy5tYXg7XG4gICAgdGhpcy5zbGlkZXIudmFsdWUgPSB0aGlzLnllYXI7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwOyJdLCJuYW1lcyI6WyJTaWRlYmFyIiwiaHRtbFN0cmluZyIsImh0bWxTdHJpbmcwIiwiaHRtbFN0cmluZzIiLCJjaG9zZW5EaXNlYXNlIiwiY2hvc2VuWWVhciIsInNldElubmVySFRNTCIsImVsbSIsImh0bWwiLCJpbm5lckhUTUwiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsIm9sZFNjcmlwdCIsIm5ld1NjcmlwdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwibmFtZSIsInZhbHVlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsInBhcmVudE5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJNYXAiLCJjb25zdHJ1Y3RvciIsImVsZSIsInllYXIiLCJkaXNlYXNlIiwibWluIiwibWF4Iiwic2lkZWJhciIsImdldEVsZW1lbnRCeUlkIiwic2xpZGVyIiwibWluWWVhciIsIm1heFllYXIiLCJtYXAiLCJvbmlucHV0IiwicmVzZXRNYXAiLCJzdmciLCJfZ3JvdXBzIiwic3BsaXQiLCJsZW5ndGgiLCJqb2luIiwicmVzZXRTaWRlYmFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/map.js\n");

/***/ }),

/***/ "./src/scripts/sidebar.js":
/*!********************************!*\
  !*** ./src/scripts/sidebar.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nfunction htmlString() {\n  return `<h3>Malaria 2020</h3>\n<text>\n  Every 75 seconds, a child under 5 dies of malaria.\n  <br>\n  <br>\n  Malaria is a mosquito born illness, disproportionately killing young children in poor, tropical countries.\n  <br>  \n  <br>\n  Malaria can be prevented by sleeping under $6 insecticide-treated bednets or taking anti-malaria medication -- it can also be treated.  Malaria rates have decreased significantly since the 2000s as more people have gotten access to bednets.\n</text>`;\n}\nfunction htmlString2(disease, year) {\n  if (disease === \"malaria\") {\n    return `<h3>Malaria ${year}</h3>\n        <text>\n          Malaria is a mosquito born illness, disproportionately killing young children in poor, tropical countries.  It's a leading killer of young children and a major drag of economic growth in malaria-endemic countries.\n          <br>\n          <br>\n          Malaria can be prevented by sleeping under $6 insecticide-treated bednets or taking anti-malaria medication -- it can also be treated.  Malaria rates have decreased significantly since the 2000s as more people have gotten access to bednets.\n        </text>`;\n  } else if (disease === \"tuberculosis\") {\n    return `<h3>Tuberculosis ${year}</h3>\n        <text>\n        Tuberculosis was the leading cause of death by infectious disease (after COVID-19), with over 1 million deaths in 2020.\n        <br>\n        <br>\n        Tuberculosis continues to kill people in nearly every country on earth but is esepcially serious in poorer countries.  Among people who die of HIV, tuberculosis is most often what actually kills them, accounting for around 30% of deaths.  (HIV deaths are not included in this map.)\n        <br>\n        <br>\n        Tuberculosis is curable with treatment.\n        </text>`;\n  } else {\n    if (disease === \"HIV\") {\n      return `<h3>HIV ${year}</h3>\n        <text>\n        HIV deaths peaked in 2004, when HIV was the leading cause of death across Africa.  (From 1997-2006, HIV accounted for the majority of deaths in Zambia.)  Although the situation has improved sunstantially, HIV continues to be the leading cause of death in South Africa, the six countries it borders, and Malawi.\n        <br>\n        <br>\n        HIV it both preventable and treatable, but it is not currently curable.\n        </text>`;\n    } else if (disease === \"leprosy\") {\n      return `<h3>Leprosy ${year}</h3>\n        <text>\n        Hansen's disease, better known as leprosy, is a disease causing nerve damage, which can lead to blindness, paralysis, or untreated skin injuries.  Although it's often thought of as an ancient disease, it's still present in many countries, with over 100,000 estimated cases worldwide in 2020.\n        <br>\n        <br>\n        Hansen's is not very infectious and can be cured with treatment, though the treatment takes 1-2 years.  Nerve damage and blindness caused by Hansen's disease are not reversible.\n        </text>`;\n    } else {\n      if (disease === \"guineaworm\") {\n        return `<h3>Guinea Worm ${year}</h3>\n        <text>\n        Along with polio, dracunculiasis (the diseases caused by a guinea worm infection) could plausibly be eradicated worldwide.  Although it doesn't kill people, guinea worm infections are debilitating and very painful.  (Don't watch <a href=\"https://www.youtube.com/watch?v=oCB1A2gFvuU\" target=\"_blank\">this video</a> if you're squeamish.)\n        <br>\n        <br>\n        Guinea worm infections are a result of drinking contaminated water, and it can be prevented with a cheap filter.  It's only natural resevoir is in humans, but Chad has reported infections in dogs, as well.\n        </text>`;\n      } else if (disease === \"polio\") {\n        return `<h3>Polio ${year}</h3>\n        <text>\n        To date, smallpox is the only human disease that has been eradicated, but polio may be next.  Two of the three strains of wild polio have been eliminated, and as of 2020, wild polio is present in just two countries: Afghanistan and Pakistan.\n        <br>\n        <br>\n        Polio can be prevented with vaccines, but universal coverage is difficult to achieve in some areas.  Diagnosis is also difficult because polio is often asymptomatic.\n        </text>`;\n      } else {\n        return `<h3>COVID-19 ${year}</h3>\n        <text>\n        You know about COVID-19!\n        <br>\n        <br>\n        \n        </text>`;\n      }\n    }\n  }\n}\nclass Sidebar {\n  constructor(ele) {\n    this.ele = ele;\n    this.ele.innerHTML = htmlString();\n  }\n  resetSidebar(disease, year) {\n    this.ele.innerHTML = htmlString2(disease, year);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sidebar);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/sidebar.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0X2dsb2JhbF9oZWFsdGgvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;