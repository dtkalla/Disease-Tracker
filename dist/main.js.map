{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript_global_health/./src/scripts/button.js","webpack://javascript_global_health/./src/scripts/sidebar.js","webpack://javascript_global_health/./src/scripts/map.js","webpack://javascript_global_health/./src/index.js"],"sourcesContent":["class Button {\n    constructor(ele,map,disease){\n        this.ele = ele;\n        this.map = map;\n        this.disease = disease;\n        this.ele.addEventListener(\"click\", this.handleClick.bind(this));\n    }\n\n    handleClick(){\n        this.map.resetMap(this.disease,this.map.year);\n    }\n}\n\nexport default Button;\n","function htmlString() {return `<h3>Malaria 2020</h3>\n<text>\n  Every 75 seconds, a child under 5 dies of malaria.\n  <br>\n  <br>\n  Malaria is a mosquito born illness, disproportionately killing young children in poor, tropical countries.\n  <br>  \n  <br>\n  Malaria can be prevented by sleeping under $6 insecticide-treated bednets or taking anti-malaria medication -- it can also be treated.  Malaria rates have decreased significantly since the 2000s as more people have gotten access to bednets.\n</text>`}\n\nfunction htmlString2(disease,year) {\n    if (disease === \"malaria\") {\n        return `<h3>Malaria ${year}</h3>\n        <text>\n          Malaria is a mosquito born illness, disproportionately killing young children in poor, tropical countries.  It's a leading killer of young children and a major drag of economic growth in malaria-endemic countries.\n          <br>\n          <br>\n          Malaria can be prevented by sleeping under $6 insecticide-treated bednets or taking anti-malaria medication -- it can also be treated.  Malaria rates have decreased significantly since the 2000s as more people have gotten access to bednets.\n        </text>`\n    } else if (disease === \"tuberculosis\") {\n        return `<h3>Tuberculosis ${year}</h3>\n        <text>\n        Tuberculosis was the leading cause of death by infectious disease (after COVID-19), with over 1 million deaths in 2020.\n        <br>\n        <br>\n        Tuberculosis continues to kill people in nearly every country on earth but is esepcially serious in poorer countries.  Among people who die of HIV, tuberculosis is most often what actually kills them, accounting for around 30% of deaths.  (HIV deaths are not included in this map.)\n        <br>\n        <br>\n        Tuberculosis is curable with treatment.\n        </text>`\n    } else {if (disease === \"HIV\") {\n        return `<h3>HIV ${year}</h3>\n        <text>\n        HIV deaths peaked in 2004, when HIV was the leading cause of death across Africa.  (From 1997-2006, HIV accounted for the majority of deaths in Zambia.)  Although the situation has improved sunstantially, HIV continues to be the leading cause of death in South Africa, the six countries it borders, and Malawi.\n        <br>\n        <br>\n        HIV it both preventable and treatable, but it is not currently curable.\n        </text>`\n    } else if (disease === \"leprosy\") {\n        return `<h3>Leprosy ${year}</h3>\n        <text>\n        Hansen's disease, better known as leprosy, is a disease causing nerve damage, which can lead to blindness, paralysis, or untreated skin injuries.  Although it's often thought of as an ancient disease, it's still present in many countries, with over 100,000 estimated cases worldwide in 2020.\n        <br>\n        <br>\n        Hansen's is not very infectious and can be cured with treatment, though the treatment takes 1-2 years.  Nerve damage and blindness caused by Hansen's disease are not reversible.\n        </text>`\n    } else {if (disease === \"guineaworm\") {\n        return `<h3>Guinea Worm ${year}</h3>\n        <text>\n        Along with polio, dracunculiasis (the disease caused by a guinea worm infection) could plausibly be eradicated worldwide.  Although it doesn't kill people, guinea worm infections are debilitating and very painful.  (Don't watch <a href=\"https://www.youtube.com/watch?v=oCB1A2gFvuU\" target=\"_blank\">this video</a> if you're squeamish.)\n        <br>\n        <br>\n        Guinea worm infections are a result of drinking contaminated water, and it can be prevented with a cheap filter.  It's only natural resevoir is in humans, but Chad has reported infections in dogs, as well.\n        </text>`\n    } else if (disease === \"polio\") {\n        return `<h3>Polio ${year}</h3>\n        <text>\n        To date, smallpox is the only human disease that has been eradicated, but polio may be next.  Two of the three strains of wild polio have been eliminated, and as of 2020, wild polio is present in just two countries: Afghanistan and Pakistan.\n        <br>\n        <br>\n        Polio can be prevented with vaccines, but universal coverage is difficult to achieve in some areas.  Diagnosis is also difficult because polio is often asymptomatic.\n        </text>`\n    } else {\n        return `<h3>COVID-19 ${year}</h3>\n        <text>\n        You already know all about COVID-19!\n        <br>\n        <br>\n        \n        </text>` \n    }\n    }}\n}\n\n\n\nclass Sidebar {\n        constructor(ele){\n            this.ele = ele;\n            this.ele.innerHTML = htmlString();\n        }\n    \n        resetSidebar(disease,year){\n            this.ele.innerHTML = htmlString2(disease,year);\n        }\n\n    }\n\n\n    export default Sidebar;\n\n","import Sidebar from \"./sidebar.js\";\n\nfunction htmlString() {\n  return `<svg id=\"my_dataviz\">\n<script>\n  svg = d3.select(\"svg\");\n\n  tooltip = d3.select(\"#tooltip\")\n    .style(\"opacity\", 0)\n    .attr(\"class\", \"tooltip\")\n    .style(\"background-color\", \"white\")\n    .style(\"border\", \"solid\")\n    .style(\"border-width\", \"1px\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"5px\")\n    .style(\"position\", \"absolute\")\n  \n  path = d3.geoPath();\n  projection = d3.geoNaturalEarth1()\n    .scale(150)\n    .center([0,0])\n  \n  data = d3.map();\n  let colorScale = d3.scaleThreshold()\n    .domain([-1,0,1,3,10,30,100,300,1000,3000,10000,30000,100000,300000,1000000])\n    .range(['#FFFFFF','#888888','#fff7ec', '#feedd5','#fee3bd', '#fdd6a5',\n    '#fdc791', '#fdb27c','#fb9865', '#f67d53','#ed6243', '#df432e',\n    '#cc2317', '#b50b07','#970101', '#7f0000']);\n\n  d3.queue()\n    .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\n    .defer(d3.csv, \\`./src/scripts/data/malaria.csv\\`, function(d) { if (d.year==2020) {data.set(d.name, +d.cases)}; })\n    .await(ready);\n  \n  function ready(error, topo) {\n  \n    let mouseOver = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"stroke\", \"black\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"opacity\", 1)\n        .style(\"stroke\", \"black\");\n        \n\n      const conversionHash = {\n        ABW: 'Aruba', AFG: 'Afghanistan', AGO: 'Angola', AIA: 'Anguilla',\n        ALB: 'Albania', AND: 'Andorra', ARE: 'United Arab Emirates',\n        ARG: 'Argentina', ARM: 'Armenia', ASM: 'American Samoa',\n        ATG: 'Antigua and Barbuda', AUS: 'Australia',AUT: 'Austria',\n        AZE: 'Azerbaijan', BDI: 'Burundi', BEL: 'Belgium', BEN: 'Benin',\n        BFA: 'Burkina Faso', BGD: 'Bangladesh', BGR: 'Bulgaria', BHR: 'Bahrain',\n        BHS: 'Bahamas', BIH: 'Bosnia and Herzegovina', BLR: 'Belarus',\n        BLZ: 'Belize', BMU: 'Bermuda', BOL: 'Bolivia', BRA: 'Brazil',\n        BRB: 'Barbados', BRN: 'Brunei', BTN: 'Bhutan', BWA: 'Botswana',\n        CAF: 'Central African Republic', CAN: 'Canada', CHE: 'Switzerland',\n        CHI: 'Channel islands', CHL: 'Chile', CHN: 'China', CIV: \"Côte d'Ivoire\",\n        CMR: 'Cameroon', COD: 'Democratic Republic of the Congo', COG: 'Congo',\n        COK: 'Cook Islands', COL: 'Colombia', COM: 'Comoros', CPV: 'Cabo Verde',\n        CRI: 'Costa Rica', CUB: 'Cuba', CUW: 'Curaçao', CYM: 'Cayman Islands',\n        CYP: 'Cyprus', CZE: 'Czechia', DEU: 'Germany', DJI: 'Djibouti', DMA: 'Dominica',\n        DNK: 'Denmark', DOM: 'Dominican Republic', DZA: 'Algeria', ECU: 'Ecuador',\n        EGY: 'Egypt', ERI: 'Eritrea', ESH: 'Western Sahara', ESP: 'Spain',\n        EST: 'Estonia', ETH: 'Ethiopia', FIN: 'Finland', FJI: 'Fiji',\n        FLK: 'Falkland Islands (Malvinas)', FRA: 'France', FRO: 'Faroe Islands',\n        FSM: 'Micronesia', GAB: 'Gabon', GBR: 'United Kingdom', GEO: 'Georgia',\n        GHA: 'Ghana', GIB: 'Gibraltar', GIN: 'Guinea', GLP: 'Guadeloupe',\n        GMB: 'Gambia', GNB: 'Guinea-Bissau', GNQ: 'Equatorial Guinea', GRC: 'Greece',\n        GRD: 'Grenada', GRL: 'Greenland', GTM: 'Guatemala', GUF: 'French Guiana',\n        GUM: 'Guam', GUY: 'Guyana', HKG: 'Hong Kong', HND: 'Honduras',\n        HRV: 'Croatia', HTI: 'Haiti', HUN: 'Hungary', IDN: 'Indonesia',\n        IMN: 'Isle of Man', IND: 'India', IRL: 'Ireland', IRN: 'Iran', IRQ: 'Iraq',\n        ISL: 'Iceland', ISR: 'Israel', ITA: 'Italy', JAM: 'Jamaica', JOR: 'Jordan',\n        JPN: 'Japan', KAZ: 'Kazakhstan', KEN: 'Kenya', KGZ: 'Kyrgyzstan',\n        KHM: 'Cambodia', KIR: 'Kiribati', KNA: 'Saint Kitts and Nevis',\n        KOR: 'South Korea', KWT: 'Kuwait', LAO: 'Laos', LBN: 'Lebanon',\n        LBR: 'Liberia', LBY: 'Libya', LCA: 'Saint Lucia', LIE: 'Liechtenstein',\n        LKA: 'Sri Lanka', LSO: 'Lesotho', LTU: 'Lithuania', LUX: 'Luxembourg',\n        LVA: 'Latvia', MAC: 'Macao', MAR: 'Morocco', MCO: 'Monaco', MDA: 'Moldova',\n        MDG: 'Madagascar', MDV: 'Maldives', ME1: 'Serbia and Montenegro',\n        MEX: 'Mexico', MHL: 'Marshall Islands', MKD: 'North Macedonia', MLI: 'Mali',\n        MLT: 'Malta', MMR: 'Myanmar', MNE: 'Montenegro', MNG: 'Mongolia',\n        MNP: 'Northern Mariana Islands', MOZ: 'Mozambique', MRT: 'Mauritania',\n        MTQ: 'Martinique', MUS: 'Mauritius', MWI: 'Malawi', MYS: 'Malaysia',\n        MYT: 'Mayotte', NAM: 'Namibia', NCL: 'New Caledonia', NER: 'Niger',\n        NGA: 'Nigeria', NIC: 'Nicaragua', NIU: 'Niue', NLD: 'Netherlands',\n        NOR: 'Norway', NPL: 'Nepal', NRU: 'Nauru', NZL: 'New Zealand',\n        OMN: 'Oman', PAK: 'Pakistan', PAN: 'Panama', PER: 'Peru',\n        PHL: 'Philippines', PLW: 'Palau', PNG: 'Papua New Guinea', POL: 'Poland',\n        PRI: 'Puerto Rico', PRK: 'North Korea', PRT: 'Portugal', PRY: 'Paraguay',\n        PSE: 'Palestine', PYF: 'French Polynesia', QAT: 'Qatar', REU: 'Reunion',\n        ROU: 'Romania', RUS: 'Russia', RWA: 'Rwanda', SAU: 'Saudi Arabia',\n        SDF: 'Sudan', SDN: 'Sudan', SEN: 'Senegal', SGP: 'Singapore',\n        SHN: 'Saint Helena', SLB: 'Solomon Islands', SLE: 'Sierra Leone',\n        SLV: 'El Salvador', SMR: 'San Marino', SOM: 'Somalia',\n        SPM: 'Saint Pierre and Miquelon', SRB: 'Serbia', SSD: 'South Sudan',\n        STP: 'Sao Tome and Principe', SUR: 'Suriname', SVK: 'Slovakia',\n        SVN: 'Slovenia', SWE: 'Sweden', SWZ: 'Eswatini', SXM: 'Sint Maarten',\n        SYC: 'Seychelles', SYR: 'Syria', TCA: 'Turks and Caicos Islands',\n        TCD: 'Chad', TGO: 'Togo', THA: 'Thailand', TJK: 'Tajikistan',\n        TKL: 'Tokelau', TKM: 'Turkmenistan', TLS: 'Timor-Leste', TON: 'Tonga',\n        TTO: 'Trinidad and Tobago', TUN: 'Tunisia', TUR: 'Türkiye (Turkey)',\n        TUV: 'Tuvalu', TZA: 'Tanzania', UGA: 'Uganda', UKR: 'Ukraine',\n        URY: 'Uruguay', USA: 'United States of America', UZB: 'Uzbekistan',\n        VCT: 'Saint Vincent and the Grenadines', VEN: 'Venezuela',\n        VGB: 'British Virgin Islands', VIR: 'Virgin Islands', VNM: 'Vietnam',\n        VUT: 'Vanuatu', WSM: 'Samoa', YEM: 'Yemen', ZAF: 'South Africa',\n        ZMB: 'Zambia', ZWE: 'Zimbabwe'\n      }\n      \n      tooltip\n      .style(\"opacity\", 0.8)\n      .html(d.total == -1 ? \"No data\" : conversionHash[d.id] + \": \" + d.total)\n      .style(\"left\", (d3.event.pageX + 30) + \"px\")  \n      .style(\"top\", (d3.event.pageY - 30) + \"px\");\n    }\n  \n    let mouseLeave = function(d) {\n      d3.selectAll(\".Country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", 1)\n        .style(\"stroke\", \"transparent\")\n      d3.select(this)\n        .transition()\n        .duration(200)\n        .style(\"stroke\", \"transparent\")\n\n      tooltip\n        .style(\"opacity\", 0)\n    }\n    function eventHandler(e) {\n      const country = e.target;\n    \n      country.style.stroke = \"red\";\n    }\n\n\n    svg.append(\"g\")\n      .selectAll(\"path\")\n      .data(topo.features)\n      .enter()\n      .append(\"path\")\n        // draw each country\n        .attr(\"d\", d3.geoPath()\n          .projection(projection)\n        )\n        // set the color of each country\n        .attr(\"fill\", function (d) {\n          d.total = data.get(d.id);\n          if (d.total === undefined || d.total == null) d.total = -1;\n          return colorScale(d.total);\n        })\n        .style(\"stroke\", \"transparent\")\n        .attr(\"class\", function(d){ return \"Country\" } )\n        .style(\"opacity\", 1)\n        .on(\"mouseover\", mouseOver )\n        .on(\"mouseleave\", mouseLeave )\n      }\n\n\n  </script>\n\n</svg>`}\n\nfunction htmlString0() {\n  return `<svg2 id=\"copy\">\n<script>\n\n  let tooltip = d3.select(\"#tooltip\")\n    .style(\"opacity\", 0)\n    .attr(\"class\", \"tooltip\")\n    .style(\"background-color\", \"white\")\n    .style(\"border\", \"solid\")\n    .style(\"border-width\", \"1px\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"5px\")\n    .style(\"position\", \"absolute\")\n\n  </script>\n\n</svg2>`}\n\n\n\nfunction htmlString2(chosenDisease, chosenYear) {\n  // <svg id=\"my_dataviz\">\n  return `\n<script>\n  \n  d3.queue()\n    .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\n    .defer(d3.csv, \\`./src/scripts/data/${chosenDisease}.csv\\`, function(d) { if (d.year==\\`${chosenYear}\\`) {data.set(d.name, +d.cases)}; })\n    .await(ready);\n  \n\n    \n  </script>\n\n`}\n// </svg>\n\nvar setInnerHTML = function (elm, html) {\n  elm.innerHTML = html;\n  Array.from(elm.querySelectorAll(\"script\")).forEach(oldScript => {\n    const newScript = document.createElement(\"script\");\n    Array.from(oldScript.attributes)\n      .forEach(attr => newScript.setAttribute(attr.name, attr.value));\n    newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n    oldScript.parentNode.replaceChild(newScript, oldScript);\n  });\n}\n\nclass Map {\n  constructor(ele) {\n    this.ele = ele;\n    this.year = 2020;\n    this.disease = 'malaria';\n    this.min = 2000;\n    this.max = 2020;\n    setInnerHTML(this.ele, htmlString());\n    const sidebar = document.getElementById(\"context\");\n    this.sidebar = new Sidebar(sidebar)\n    let slider = document.getElementById(\"myRange\");\n\n    this.minYear = document.getElementById(\"minyear\");\n    this.maxYear = document.getElementById(\"maxyear\");\n\n    slider.map = this;\n    this.slider = slider;\n\n    slider.oninput = function () {\n      this.map.resetMap(this.disease, this.value);\n      const html = svg._groups[0][0].innerHTML.split('<g>')\n      if (html.length > 3) {\n      svg._groups[0][0].innerHTML = [html[1],html[2],html[3]].join('<g>') }\n    }\n    this.resetMap(\"malaria\",2020)\n  }\n\n\n  resetMap(disease, year) {\n    this.disease = disease;\n    this.year = year;\n    if (disease == 'polio') {\n      this.min = 2016;\n      this.max = 2021;\n    } else if (disease == 'leprosy') {\n      this.min = 2012;\n      this.max = 2021;\n    } else {\n      if (disease == 'covid19') {\n        this.min = 2020;\n        this.max = 2021;\n      } else if (disease == 'guineaworm') {\n        this.min = 1989;\n        this.max = 2021;\n      } else {\n        if (disease == 'malaria') {\n          this.min = 2000;\n          this.max = 2020;\n        } else {\n          this.min = 2000;\n          this.max = 2021;\n        }\n      }\n    }\n    // setInnerHTML(this.ele, htmlString2(\"nulldata\",2020));\n    if (this.year > this.max) this.year = this.max;\n    if (this.year < this.min) this.year = this.min;\n    setInnerHTML(this.ele, htmlString2(this.disease, this.year));\n    this.sidebar.resetSidebar(this.disease, this.year);\n    this.slider.disease = disease;\n    this.minYear.innerHTML = `${this.min}`\n    this.maxYear.innerHTML = `${this.max}`\n    this.slider.min = this.min;\n    this.slider.max = this.max;\n    this.slider.value = this.year;\n  }\n}\n\nexport default Map;","import Button from \"./scripts/button.js\";\nimport Map from \"./scripts/map.js\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const data = document.getElementById(\"my_dataviz\");\n    new Map(data);\n    const dataCopy = document.getElementById(\"copy\");\n    const map = new Map(dataCopy);\n\n    \n    const data1 = document.getElementById(\"tuberculosis\");\n    new Button(data1,map,\"tuberculosis\");\n    const data2 = document.getElementById(\"malaria\");\n    new Button(data2,map,\"malaria\");\n    const data3 = document.getElementById(\"HIV\");\n    new Button(data3,map,\"HIV\");\n    const data2019 = document.getElementById(\"covid19\");\n    new Button(data2019,map,\"covid19\");\n    const data4 = document.getElementById(\"guineaWorm\");\n    new Button(data4,map,\"guineaworm\");\n    const data5 = document.getElementById(\"polio\");\n    new Button(data5,map,\"polio\");\n    const data6 = document.getElementById(\"leprosy\");\n    new Button(data6,map,\"leprosy\");\n});\n\n"],"names":["setInnerHTML","constructor","ele","map","disease","this","addEventListener","handleClick","bind","resetMap","year","innerHTML","resetSidebar","htmlString2","elm","html","Array","from","querySelectorAll","forEach","oldScript","newScript","document","createElement","attributes","attr","setAttribute","name","value","appendChild","createTextNode","parentNode","replaceChild","min","max","sidebar","getElementById","Sidebar","slider","minYear","maxYear","oninput","svg","_groups","split","length","join","data","Map","dataCopy","data1","Button","data2","data3","data2019","data4","data5","data6"],"sourceRoot":""}